{"version":3,"sources":["glam.js","animation.js","arc.js","background.js","camera.js","circle.js","classList.js","cone.js","controller.js","cube.js","cylinder.js","document.js","effect.js","group.js","import.js","input.js","light.js","line.js","material.js","mesh.js","node.js","parser.js","particles.js","rect.js","renderer.js","sphere.js","style.js","text.js","transform.js","transition.js","types.js","viewer.js","visual.js"],"names":[],"mappings":"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","file":"glamlib.min.js","sourcesContent":["/**\r\n * @fileoverview glam namespace and globals\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\n\r\n\r\nglam = {\r\n\r\n\t\tdocuments : {},\r\n\t\t\r\n\t\tdocumentIndex : 0,\r\n\t\t\t\t\r\n\t\tstyles : {},\r\n\r\n\t\tviewers : {},\r\n\r\n\t\tanimations : {}\r\n\t\t\r\n};\r\n\r\nglam.isReady = false;\r\nglam.ready = function(doc) {\r\n\tif (glam.isReady)\r\n\t\treturn;\r\n\t\r\n\tglam.parser.parseDocument(doc);\r\n\tglam.createViewers();\r\n\t\r\n\tglam.isReady = true;\r\n}\r\n\r\nglam.createViewers = function() {\r\n\tfor (docname in glam.documents) {\r\n\t\tvar doc = glam.documents[docname];\r\n\t\tvar viewer = new glam.Viewer(doc);\r\n\t\tglam.viewers[docname] = viewer;\r\n\t\tviewer.go();\r\n\t}\r\n}\r\n\r\n\r\nglam.addStyle = function(selector, style)\r\n{\r\n\tglam.styles[selector] = style;\r\n}\r\n\r\nglam.getStyle = function(selector)\r\n{\r\n\treturn glam.styles[selector];\r\n}\r\n\r\nglam.addAnimation = function(id, animation)\r\n{\r\n\tglam.animations[id] = animation;\r\n}\r\n\r\nglam.getAnimation = function(id) {\r\n\treturn glam.animations[id];\r\n}\r\n\r\nglam.setFullScreen = function(enable) {\r\n\treturn Vizi.Graphics.instance.setFullScreen(enable);\r\n}\r\n\r\n","/**\r\n * @fileoverview animation parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Animation = {};\r\n\r\nglam.Animation.DEFAULT_DURATION = \"1s\";\r\nglam.Animation.DEFAULT_ITERATION_COUNT = \"1\";\r\nglam.Animation.DEFAULT_TIMING_FUNCTION = \"linear\";\r\nglam.Animation.DEFAULT_FRAME_TIME = \"0%\";\r\nglam.Animation.DEFAULT_FRAME_PROPERTY = \"transform\";\r\n\r\nglam.Animation.create = function(docelt) {\r\n\r\n\tvar id = docelt.id;\r\n\tvar duration = docelt.getAttribute('duration') || glam.Animation.DEFAULT_DURATION;\r\n\tvar iterationCount = docelt.getAttribute('iteration-count') || glam.Animation.DEFAULT_ITERATION_COUNT;\r\n\tvar timingFunction = docelt.getAttribute('timing-function') || glam.Animation.DEFAULT_TIMING_FUNCTION;\r\n\t\r\n\tduration = glam.Animation.parseTime(duration);\r\n\tvar easing = glam.Animation.parseTimingFunction(timingFunction);\r\n\tvar loop = (iterationCount.toLowerCase() == \"infinite\") ? true : false;\r\n\t\r\n\tvar i, \r\n\t\tchildren = docelt.childNodes, \r\n\t\tlen = children.length,\r\n\t\tframes = [];\r\n\t\r\n\tfor (i = 0; i < len; i++) {\r\n\t\tvar childelt = children[i];\r\n\t\tvar tag = childelt.tagName;\r\n\t\tif (tag)\r\n\t\t\ttag = tag.toLowerCase();\r\n\t\t\r\n\t\tif (tag == \"keyframe\") {\r\n\t\t\tvar frame = glam.Animation.parseFrame(childelt);\r\n\t\t\tframes.push(frame);\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar anim = glam.Animation.build(duration, loop, easing, frames);\r\n\t\r\n\tglam.addAnimation(id, anim);\r\n\tglam.Animation.callParseCallbacks(id, anim);\r\n}\r\n\r\nglam.Animation.parseFrame = function(docelt) {\r\n\r\n\tvar time = docelt.getAttribute('time') || glam.Animation.DEFAULT_FRAME_TIME;\r\n\tvar frametime = glam.Animation.parseFrameTime(time);\r\n\tvar property = docelt.getAttribute('property') || glam.Animation.DEFAULT_FRAME_PROPERTY;\r\n\tvar value = docelt.getAttribute('value') || \"\";\r\n\t\r\n\tif (property == \"transform\") {\r\n\t\tvar t = {};\r\n\t\tglam.Transform.parseTransform(value, t);\r\n\r\n\t\treturn {\r\n\t\t\ttime : frametime,\r\n\t\t\tvalue : t,\r\n\t\t\ttype : \"transform\",\r\n\t\t};\r\n\t}\r\n\telse if (property == \"material\") {\r\n\r\n\t\tvar s = glam.Animation.parseMaterial(value);\r\n\t\tvar param = glam.Material.parseStyle(s);\r\n\r\n\t\treturn {\r\n\t\t\ttime : frametime,\r\n\t\t\tvalue : param,\r\n\t\t\ttype : \"material\",\r\n\t\t};\r\n\t}\r\n\t\r\n}\r\n\r\nglam.Animation.createFromStyle = function(docelt, style, obj) {\r\n\tvar animationSpec,\r\n\t\tanimationName,\r\n\t\tduration,\r\n\t\ttimingFunction,\r\n\t\teasing,\r\n\t\tdelayTime,\r\n\t\titerationCount,\r\n\t\tloop;\r\n\r\n\tanimationName = style[\"animation-name\"]\r\n\t                          || style[\"-webkit-animation-name\"]\r\n\t \t\t                  || style[\"-moz-animation-name\"];\r\n\t\r\n\tif (animationName) {\r\n\t\tduration = style[\"animation-duration\"]\r\n\t            || style[\"-webkit-animation-duration\"]\r\n\t \t\t      || style[\"-moz-animation-duration\"];\r\n\r\n\t\t\r\n\t\ttimingFunction = style[\"animation-timing-function\"]\r\n\t\t                    || style[\"-webkit-animation-timing-function\"]\r\n\t\t\t\t \t\t      || style[\"-moz-animation-timing-function\"];\r\n\t\t\r\n\t\titerationCount = style[\"animation-iteration-count\"]\r\n\t\t\t                    || style[\"-webkit-animation-iteration-count\"]\r\n\t\t\t\t\t \t\t      || style[\"-moz-animation-iteration-count\"];\r\n\t}\r\n\telse {\r\n\t\tanimationSpec = style[\"animation\"]\r\n\t\t                      || style[\"-webkit-animation\"]\r\n\t\t \t\t \t\t      || style[\"-moz-animation\"];\r\n\t\t\r\n\t\tif (animationSpec) {\r\n\t\t\t// name duration timing-function delay iteration-count direction\r\n\t\t\tvar split = animationSpec.split(\"\\\\s+\");\r\n\t\t\tanimationName = split[0];\r\n\t\t\tduration = split[1];\r\n\t\t\ttimingFunction = split[2];\r\n\t\t\tdelayTime = split[3];\r\n\t\t\titerationCount = split[4];\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n    duration = duration || glam.Animation.DEFAULT_DURATION;\r\n\tduration = glam.Animation.parseTime(duration);\r\n    timingFunction = timingFunction || glam.Animation.DEFAULT_TIMING_FUNCTION;\r\n\teasing = glam.Animation.parseTimingFunction(timingFunction);\r\n    iterationCount = iterationCount || glam.Animation.DEFAULT_ITERATION_COUNT;\r\n\tloop = (iterationCount.toLowerCase() == \"infinite\") ? true : false;\t\t\t\t\r\n\t\r\n\tif (animationName) {\r\n\t\tvar animation = glam.getStyle(animationName);\r\n\t\t\r\n\t\tvar frames = [];\r\n\t\t\r\n\t\tfor (var k in animation) {\r\n\t\t\tvar frametime;\r\n\t\t\tif (k == 'from') {\r\n\t\t\t\tframetime = 0; \r\n\t\t\t}\r\n\t\t\telse if (k == 'to') {\r\n\t\t\t\tframetime = 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tframetime = glam.Animation.parseFrameTime(k);\r\n\t\t\t}\r\n\r\n\t\t\tvar framevalue;\r\n\t\t\tvar framedata = animation[k];\r\n\t\t\tfor (prop in framedata) {\r\n\t\t\t\tvar value = framedata[prop];\r\n\t\t\t\tvar type;\r\n\t\t\t\tif (prop == \"transform\" ||\r\n\t\t\t\t\t\tprop == \"-webkit-transform\" ||\r\n\t\t\t\t\t\tprop == \"-moz-transform\") {\r\n\t\t\t\t\t\r\n\t\t\t\t\ttype = \"transform\";\r\n\t\t\t\t\tframevalue = {};\r\n\t\t\t\t\tglam.Transform.parseTransform(value, framevalue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (prop == \"opacity\" || prop == \"color\") {\r\n\t\t\t\t\ttype = \"material\";\r\n\t\t\t\t\tframevalue = glam.Material.parseStyle(framedata);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar frame = {\r\n\t\t\t\t\t\ttime : frametime,\r\n\t\t\t\t\t\tvalue : framevalue,\r\n\t\t\t\t\t\ttype : type,\r\n\t\t\t\t\t};\r\n\t\t\t\tframes.push(frame);\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tvar anim = glam.Animation.build(duration, loop, easing, frames);\r\n\t\tglam.Animation.addAnimationToObject(anim, obj);\r\n\t}\r\n\t\r\n}\r\n\r\nglam.Animation.build = function(duration, loop, easing, frames) {\r\n\r\n\tvar poskeys = [];\r\n\tvar posvalues = [];\r\n\tvar rotkeys = [];\r\n\tvar rotvalues = [];\r\n\tvar sclkeys = [];\r\n\tvar sclvalues = [];\r\n\tvar opakeys = [];\r\n\tvar opavalues = [];\r\n\tvar colorkeys = [];\r\n\tvar colorvalues = [];\r\n\t\r\n\tvar i, len = frames.length;\r\n\t\r\n\tfor (i = 0; i < len; i++) {\r\n\t\tvar frame = frames[i];\r\n\t\tvar val = frame.value;\r\n\t\tif (frame.type == \"transform\") {\r\n\t\t\tif (\"x\" in val || \"y\" in val || \"z\" in val) {\r\n\t\t\t\tposkeys.push(frame.time);\r\n\t\t\t\tvar value = {\r\n\t\t\t\t};\r\n\t\t\t\tif (\"x\" in val) {\r\n\t\t\t\t\tvalue.x = val.x;\r\n\t\t\t\t}\r\n\t\t\t\tif (\"y\" in val) {\r\n\t\t\t\t\tvalue.y = val.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (\"z\" in val) {\r\n\t\t\t\t\tvalue.z = val.z;\r\n\t\t\t\t}\r\n\t\t\t\tposvalues.push(value);\r\n\t\t\t}\r\n\t\t\tif (\"rx\" in val || \"ry\" in val || \"rz\" in val) {\r\n\t\t\t\trotkeys.push(frame.time);\r\n\t\t\t\tvar value = {\r\n\t\t\t\t};\r\n\t\t\t\tif (\"rx\" in val) {\r\n\t\t\t\t\tvalue.x = val.rx;\r\n\t\t\t\t}\r\n\t\t\t\tif (\"ry\" in val) {\r\n\t\t\t\t\tvalue.y = val.ry;\r\n\t\t\t\t}\r\n\t\t\t\tif (\"rz\" in val) {\r\n\t\t\t\t\tvalue.z = val.rz;\r\n\t\t\t\t}\r\n\t\t\t\trotvalues.push(value);\r\n\t\t\t}\r\n\t\t\tif (\"sx\" in val || \"sy\" in val || \"sz\" in val) {\r\n\t\t\t\tsclkeys.push(frame.time);\r\n\t\t\t\tvar value = {\r\n\t\t\t\t};\r\n\t\t\t\tif (\"sx\" in val) {\r\n\t\t\t\t\tvalue.x = val.sx;\r\n\t\t\t\t}\r\n\t\t\t\tif (\"sy\" in val) {\r\n\t\t\t\t\tvalue.y = val.sy;\r\n\t\t\t\t}\r\n\t\t\t\tif (\"sz\" in val) {\r\n\t\t\t\t\tvalue.z = val.sz;\r\n\t\t\t\t}\r\n\t\t\t\tsclvalues.push(value);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (frame.type == \"material\") {\r\n\t\t\tif (\"opacity\" in val) {\r\n\t\t\t\topakeys.push(frame.time);\r\n\t\t\t\topavalues.push( { opacity : parseFloat(val.opacity) });\r\n\t\t\t}\r\n\t\t\tif (\"color\" in val) {\r\n\t\t\t\tcolorkeys.push(frame.time);\r\n\t\t\t\tvar rgbColor = new THREE.Color(val.color);\r\n\t\t\t\tcolorvalues.push( { r : rgbColor.r, g: rgbColor.g, b: rgbColor.b });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar anim = {\r\n\t\tduration : duration,\r\n\t\tloop : loop,\r\n\t\teasing : easing,\r\n\t\tposkeys : poskeys,\r\n\t\tposvalues : posvalues,\r\n\t\trotkeys : rotkeys,\r\n\t\trotvalues : rotvalues,\r\n\t\tsclkeys : sclkeys,\r\n\t\tsclvalues : sclvalues,\r\n\t\topakeys : opakeys,\r\n\t\topavalues : opavalues,\r\n\t\tcolorkeys : colorkeys,\r\n\t\tcolorvalues : colorvalues,\r\n\t};\r\n\r\n\treturn anim;\r\n}\r\n\r\nglam.Animation.parseTime = function(time) {\r\n\tvar index = time.indexOf(\"ms\");\r\n\tif (index != -1)\r\n\t\treturn parseFloat(time.split(\"ms\")[0]);\r\n\t\r\n\tvar index = time.indexOf(\"s\");\r\n\tif (index != -1)\r\n\t\treturn parseFloat(time.split(\"s\")[0]) * 1000;\r\n\t\r\n}\r\n\r\nglam.Animation.parseFrameTime = function(time) {\r\n\tvar index = time.indexOf(\"%\");\r\n\tif (index != -1)\r\n\t\treturn parseFloat(time.split(\"%\")[0]) / 100;\r\n\telse\r\n\t\treturn parseFloat(time);\r\n}\r\n\r\nglam.Animation.parseTimingFunction = function(timingFunction) {\r\n\ttimingFunction = timingFunction.toLowerCase();\r\n\tswitch (timingFunction) {\r\n\t\r\n\t\tcase \"linear\" :\r\n\t\t\treturn TWEEN.Easing.Linear.None;\r\n\t\t\tbreak;\r\n\t\t\r\n\t\tcase \"ease-in-out\" :\r\n\t\tdefault :\r\n\t\t\treturn TWEEN.Easing.Quadratic.InOut;\r\n\t\t\tbreak;\r\n\t\t\r\n\t}\r\n}\r\n\r\nglam.Animation.parseMaterial = function(value) {\r\n\r\n\tvar s = {};\r\n\t\r\n\tvar values = value.split(\";\");\r\n\tvar i, len = values.length;\r\n\tfor (i = 0; i < len; i++) {\r\n\t\tvar val = values[i];\r\n\t\tif (val) {\r\n\t\t\tvar valsplit = val.split(\":\");\r\n\t\t\tvar valname = valsplit[0];\r\n\t\t\tvar valval = valsplit[1];\r\n\t\t\t\r\n\t\t\ts[valname] = valval;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn s;\r\n}\r\n\r\nglam.Animation.parse = function(docelt, style, obj) {\r\n\tvar animationId = docelt.getAttribute('animation');\r\n\tif (animationId) {\r\n\t\tvar animation = glam.getAnimation(animationId);\r\n\t\tif (animation) {\r\n\t\t\tglam.Animation.addAnimationToObject(animation, obj);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tglam.Animation.addParseCallback(animationId, function(animation) {\r\n\t\t\t\tglam.Animation.addAnimationToObject(animation, obj);\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tglam.Animation.createFromStyle(docelt, style, obj);\r\n\t}\r\n}\r\n\r\nglam.Animation.addAnimationToObject = function(animation, obj) {\r\n\t\t\r\n\tvar interps = [];\r\n\tif (animation.poskeys.length) {\r\n\t\tinterps.push({\r\n\t\t\tkeys : animation.poskeys,\r\n\t\t\tvalues : animation.posvalues,\r\n\t\t\ttarget : obj.transform.position,\r\n\t\t});\r\n\t}\r\n\tif (animation.rotkeys.length) {\r\n\t\tinterps.push({\r\n\t\t\tkeys : animation.rotkeys,\r\n\t\t\tvalues : animation.rotvalues,\r\n\t\t\ttarget : obj.transform.rotation,\r\n\t\t});\r\n\t}\r\n\tif (animation.sclkeys.length) {\r\n\t\tinterps.push({\r\n\t\t\tkeys : animation.sclkeys,\r\n\t\t\tvalues : animation.sclvalues,\r\n\t\t\ttarget : obj.transform.scale,\r\n\t\t});\r\n\t}\r\n\tif (animation.opakeys.length) {\r\n\t\tinterps.push({\r\n\t\t\tkeys : animation.opakeys,\r\n\t\t\tvalues : animation.opavalues,\r\n\t\t\ttarget : obj.visuals[0].material,\r\n\t\t});\r\n\t}\r\n\tif (animation.colorkeys.length) {\r\n\t\tinterps.push({\r\n\t\t\tkeys : animation.colorkeys,\r\n\t\t\tvalues : animation.colorvalues,\r\n\t\t\ttarget : obj.visuals[0].material.color,\r\n\t\t});\r\n\t}\r\n\tvar loop = animation.iterationCount > 1;\r\n\t\r\n\tif (interps.length) {\r\n\t\tvar kf = new Vizi.KeyFrameAnimator({ interps: interps, \r\n\t\t\tduration : animation.duration, \r\n\t\t\tloop : animation.loop, \r\n\t\t\teasing: animation.easing\r\n\t\t});\r\n\t\tobj.addComponent(kf);\r\n\t\t\r\n\t\tkf.start();\r\n\t}\r\n}\r\n\r\nglam.Animation.parseCallbacks = {};\r\n\r\nglam.Animation.addParseCallback = function(id, cb) {\r\n\tvar cbs = glam.Animation.parseCallbacks[id];\r\n\tif (!cbs) {\r\n\t\tcbs = { callbacks : [] };\r\n\t\tglam.Animation.parseCallbacks[id] = cbs;\r\n\t}\r\n\r\n\tcbs.callbacks.push(cb);\r\n\t\r\n}\r\n\r\nglam.Animation.callParseCallbacks = function(id, anim) {\r\n\tvar cbs = glam.Animation.parseCallbacks[id];\r\n\tif (cbs) {\r\n\t\tvar callbacks = cbs.callbacks;\r\n\t\tvar i, len = callbacks.length;\r\n\t\tfor (i = 0; i < len; i++) {\r\n\t\t\tvar cb = callbacks[i];\r\n\t\t\tcb(anim);\r\n\t\t}\r\n\t}\r\n}\r\n","/**\r\n * @fileoverview 2D arc parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Arc = {};\r\n\r\nglam.Arc.DEFAULT_RADIUS = 2;\r\nglam.Arc.DEFAULT_RADIUS_SEGMENTS = 32;\r\nglam.Arc.DEFAULT_START_ANGLE = \"0deg\";\r\nglam.Arc.DEFAULT_END_ANGLE = \"360deg\";\r\n\r\nglam.Arc.create = function(docelt, style) {\r\n\treturn glam.Visual.create(docelt, style, glam.Arc);\r\n}\r\n\r\nglam.Arc.getAttributes = function(docelt, style, param) {\r\n\r\n\tfunction parseRotation(r) {\r\n\t\treturn glam.Transform.parseRotation(r);\r\n\t}\r\n\t\r\n\tvar radius = docelt.getAttribute('radius') || glam.Arc.DEFAULT_RADIUS;\r\n\tvar radiusSegments = docelt.getAttribute('radiusSegments') || glam.Arc.DEFAULT_RADIUS_SEGMENTS;\r\n\r\n\tvar startAngle = docelt.getAttribute('startAngle') || glam.Arc.DEFAULT_START_ANGLE;\r\n\tvar endAngle = docelt.getAttribute('endAngle') || glam.Arc.DEFAULT_END_ANGLE;\r\n\t\r\n\tif (style) {\r\n\t\tif (style.radius)\r\n\t\t\tradius = style.radius;\r\n\t\tif (style.radiusSegments)\r\n\t\t\tradiusSegments = style.radiusSegments;\r\n\t\tif (style.startAngle)\r\n\t\t\tstartAngle = style.startAngle;\r\n\t\tif (style.endAngle)\r\n\t\t\tendAngle = style.endAngle;\r\n\t}\r\n\t\r\n\tradius = parseFloat(radius);\r\n\tradiusSegments = parseInt(radiusSegments);\r\n\tstartAngle = parseRotation(startAngle);\r\n\tendAngle = parseRotation(endAngle);\r\n\r\n\tparam.radius = radius;\r\n\tparam.radiusSegments = radiusSegments;\r\n\tparam.startAngle = startAngle;\r\n\tparam.endAngle = endAngle;\r\n}\r\n\r\nglam.Arc.createVisual = function(docelt, material, param) {\r\n\t\r\n\tvar visual = new Vizi.Visual(\r\n\t\t\t{ geometry: new THREE.CircleGeometry(param.radius, param.radiusSegments, param.startAngle, param.endAngle),\r\n\t\t\t\tmaterial: material\r\n\t\t\t});\r\n\r\n\treturn visual;\r\n}\r\n","/**\r\n * @fileoverview background parser/implementation. supports skyboxes and skyspheres\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Background = {};\r\n\r\nglam.Background.DEFAULT_BACKGROUND_TYPE = \"box\";\r\n\r\nglam.Background.create = function(docelt, style) {\r\n\tvar type = docelt.getAttribute('background-type') || glam.Background.DEFAULT_BACKGROUND_TYPE;\r\n\ttype = docelt.getAttribute('type') || type;\r\n\t\r\n\tif (style) {\r\n\t\tif (style[\"background-type\"])\r\n\t\t\ttype = style[\"background-type\"];\r\n\t\tvar  param = glam.Material.parseStyle(style);\r\n\t}\t\r\n\r\n\tvar background;\r\n\tif (type == \"box\") {\r\n\t\tbackground = Vizi.Prefabs.Skybox();\r\n\t\tvar skyboxScript = background.getComponent(Vizi.SkyboxScript);\r\n\t\tskyboxScript.texture = param.envMap;\r\n\t}\r\n\telse if (type == \"sphere\") {\r\n\t\tbackground = Vizi.Prefabs.Skysphere();\r\n\t\tskysphereScript = background.getComponent(Vizi.SkysphereScript);\r\n\t\tskysphereScript.texture = param.envMap;\r\n\t}\r\n\r\n\tglam.Background.addHandlers(docelt, style, background);\r\n\t\r\n\tVizi.Application.instance.addObject(background);\r\n\t\r\n\treturn null;\r\n}\r\n\r\nglam.Background.addHandlers = function(docelt, style, obj) {\r\n\r\n\tdocelt.glam.setAttributeHandlers.push(function(attr, val) {\r\n\t\tglam.Background.onSetAttribute(obj, docelt, attr, val);\r\n\t});\r\n\t\r\n\tstyle.setPropertyHandlers.push(function(attr, val) {\r\n\t\tglam.Background.onSetAttribute(obj, docelt, attr, val);\r\n\t});\r\n}\r\n\r\nglam.Background.onSetAttribute = function(obj, docelt, attr, val) {\r\n\r\n\tswitch (attr) {\r\n\t\tcase \"sphere-image\" :\r\n\t\tcase \"sphereImage\" :\r\n\t\t\tvar skysphereScript = obj.getComponent(Vizi.SkysphereScript);\r\n\t\t\tif (skysphereScript) {\r\n\t\t\t\tvar envMap = THREE.ImageUtils.loadTexture(val);\r\n\t\t\t\tskysphereScript.texture = envMap;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n","/**\r\n * @fileoverview camera parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Camera = {};\r\n\r\nglam.Camera.DEFAULT_FOV = 45;\r\nglam.Camera.DEFAULT_NEAR = 1;\r\nglam.Camera.DEFAULT_FAR = 10000;\r\n\r\nglam.Camera.create = function(docelt, style, app) {\r\n\t\r\n\tvar fov = docelt.getAttribute('fov') || glam.Camera.DEFAULT_FOV;\r\n\tvar near = docelt.getAttribute('near') || glam.Camera.DEFAULT_NEAR;\r\n\tvar far = docelt.getAttribute('far') || glam.Camera.DEFAULT_FAR;\r\n\tvar aspect = docelt.getAttribute('aspect');\r\n\t\r\n\tif (style) {\r\n\t\tif (style.fov)\r\n\t\t\tfov = style.fov;\r\n\t\tif (style.near)\r\n\t\t\tnear = style.near;\r\n\t\tif (style.far)\r\n\t\t\tfar = style.far;\r\n\t\tif (style.aspect)\r\n\t\t\taspect = style.aspect;\r\n\t}\r\n\t\r\n\tfov = parseFloat(fov);\r\n\tnear = parseFloat(near);\r\n\tfar = parseFloat(far);\r\n\t\r\n\tvar param = {\r\n\t\t\tfov : fov,\r\n\t\t\tnear : near,\r\n\t\t\tfar : far,\r\n\t};\r\n\r\n\tif (aspect) {\r\n\t\taspect = parseFloat(aspect);\r\n\t\tparam.aspect = aspect;\r\n\t}\r\n\t\r\n\tvar camera = new Vizi.Object;\t\r\n\tvar cam = new Vizi.PerspectiveCamera(param);\r\n\tcamera.addComponent(cam);\r\n\t\r\n\tapp.addCamera(cam, docelt.id);\r\n\t\r\n\treturn camera;\r\n}\r\n","/**\r\n * @fileoverview 2D circle parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Circle = {};\r\n\r\nglam.Circle.DEFAULT_RADIUS = 2;\r\nglam.Circle.DEFAULT_RADIUS_SEGMENTS = 32;\r\n\r\nglam.Circle.create = function(docelt, style) {\r\n\treturn glam.Visual.create(docelt, style, glam.Circle);\r\n}\r\n\r\nglam.Circle.getAttributes = function(docelt, style, param) {\r\n\r\n\tvar radius = docelt.getAttribute('radius') || glam.Circle.DEFAULT_RADIUS;\r\n\tvar radiusSegments = docelt.getAttribute('radiusSegments') || glam.Circle.DEFAULT_RADIUS_SEGMENTS;\r\n\t\r\n\tif (style) {\r\n\t\tif (style.radius)\r\n\t\t\tradius = style.radius;\r\n\t\tif (style.radiusSegments)\r\n\t\t\tradiusSegments = style.radiusSegments;\r\n\t}\r\n\r\n\tradius = parseFloat(radius);\r\n\tradiusSegments = parseInt(radiusSegments);\r\n\t\r\n\tparam.radius = radius;\r\n\tparam.radiusSegments = radiusSegments;\r\n}\r\n\r\nglam.Circle.createVisual = function(docelt, material, param) {\r\n\t\r\n\tvar visual = new Vizi.Visual(\r\n\t\t\t{ geometry: new THREE.CircleGeometry(param.radius, param.radiusSegments),\r\n\t\t\t\tmaterial: material\r\n\t\t\t});\r\n\t\r\n\treturn visual;\r\n}\r\n","/**\r\n * @fileoverview class list - emulate DOM classList property for glam\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.ClassList = function(docelt) {\r\n\tthis.docelt = docelt;\r\n\tArray.call(this);\r\n}\r\n\r\nglam.ClassList.prototype = new Array;\r\n\r\nglam.ClassList.prototype.item = function(i) {\r\n\treturn this[i];\r\n}\r\n\r\nglam.ClassList.prototype.add = function(item) {\r\n\treturn this.push(item);\r\n}\r\n\r\nglam.ClassList.prototype.remove = function(item) {\r\n\tvar i = this.indexOf(item);\r\n\tif (i != -1) {\r\n\t\tthis.splice(i, 1)\r\n\t}\r\n}\r\n\r\n","/**\r\n * @fileoverview cone primitive parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Cone = {};\r\n\r\nglam.Cone.DEFAULT_RADIUS = 2;\r\nglam.Cone.DEFAULT_HEIGHT = 2;\r\n\r\nglam.Cone.create = function(docelt, style) {\r\n\treturn glam.Visual.create(docelt, style, glam.Cone);\r\n}\r\n\r\nglam.Cone.getAttributes = function(docelt, style, param) {\r\n\r\n\tvar radius = docelt.getAttribute('radius') || glam.Cone.DEFAULT_RADIUS;\r\n\tvar height = docelt.getAttribute('height') || glam.Cone.DEFAULT_HEIGHT;\r\n\t\r\n\tif (style) {\r\n\t\tif (style.radius)\r\n\t\t\tradius = style.radius;\r\n\t\tif (style.height)\r\n\t\t\theight = style.height;\r\n\t}\r\n\r\n\tradius = parseFloat(radius);\r\n\theight = parseFloat(height);\r\n\t\r\n\tparam.radius = radius;\r\n\tparam.height = height;\r\n}\r\n\r\nglam.Cone.createVisual = function(docelt, material, param) {\r\n\t\r\n\tvar visual = new Vizi.Visual(\r\n\t\t\t{ geometry: new THREE.CylinderGeometry(0, param.radius, param.height, 32),\r\n\t\t\t\tmaterial: material\r\n\t\t\t});\r\n\r\n\treturn visual;\r\n}\r\n","/**\r\n * @fileoverview controller parser/implementation. supports model, FPS and Rift\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Controller = {};\r\n\r\nglam.Controller.create = function(docelt, style, app) {\r\n\tvar on = true;\r\n\t\r\n\tvar noheadlight = docelt.getAttribute(\"noheadlight\");\r\n\tif (noheadlight !== null) {\r\n\t\ton = false;\r\n\t\tapp.controllerScript.headlightOn = false;\r\n\t}\r\n\t\r\n\tvar type = docelt.getAttribute(\"type\");\r\n\tif (type !== null) {\r\n\t\ttype = type.toLowerCase();\r\n\t\tif (type == \"fps\") {\r\n\t\t\t\r\n\t\t\tvar x = parseFloat(docelt.getAttribute('x')) || 0;\r\n\t\t\tvar y = parseFloat(docelt.getAttribute('y')) || 0;\r\n\t\t\tvar z = parseFloat(docelt.getAttribute('z')) || 0;\r\n\t\t\t\r\n\t\t\tvar controller = Vizi.Prefabs.FirstPersonController({active:true, headlight:on});\r\n\t\t\tvar controllerScript = controller.getComponent(Vizi.FirstPersonControllerScript);\r\n\t\t\tapp.addObject(controller);\r\n\r\n\t\t\tvar object = new Vizi.Object;\t\r\n\t\t\tvar camera = new Vizi.PerspectiveCamera();\r\n\t\t\tobject.addComponent(camera);\r\n\t\t\tapp.addObject(object);\r\n\r\n\t\t\tcontrollerScript.camera = camera;\r\n\t\t\tcamera.active = true;\r\n\t\t\t\r\n\t\t}\r\n\t\telse if (type == \"rift\") {\r\n\t\t\tvar controller = Vizi.Prefabs.RiftController({active:true, \r\n\t\t\t\theadlight:on,\r\n\t\t\t\tmouseLook:false,\r\n\t\t\t\tuseVRJS : true,\r\n\t\t\t});\r\n\t\t\tvar controllerScript = controller.getComponent(Vizi.RiftControllerScript);\t\t\t\r\n\t\t\tapp.addObject(controller);\r\n\r\n\t\t\tvar object = new Vizi.Object;\t\r\n\t\t\tvar camera = new Vizi.PerspectiveCamera();\r\n\t\t\tobject.addComponent(camera);\r\n\t\t\tapp.addObject(object);\r\n\r\n\t\t\tcontrollerScript.camera = camera;\r\n\t\t\tcamera.active = true;\r\n\t\t\t\r\n\t\t\tif (app.controllerScript) {\r\n\t\t\t\tapp.controllerScript.enabled = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// hack because existing FPS or model controller\r\n\t\t\t// will clobber our values\r\n\t\t\tapp.controller = controller;\r\n\t\t\tapp.controllerScript = controllerScript;\r\n\t\t}\r\n\t\telse if (type == \"deviceorientation\") {\r\n\t\t\tvar controller = Vizi.Prefabs.DeviceOrientationController({active:true, \r\n\t\t\t\theadlight:on,\r\n\t\t\t\tmouseLook:false,\r\n\t\t\t\tuseVRJS : true,\r\n\t\t\t});\r\n\t\t\tvar controllerScript = controller.getComponent(Vizi.DeviceOrientationControllerScript);\t\t\t\r\n\t\t\tapp.addObject(controller);\r\n\r\n\t\t\tvar object = new Vizi.Object;\t\r\n\t\t\tvar camera = new Vizi.PerspectiveCamera();\r\n\t\t\tobject.addComponent(camera);\r\n\t\t\tapp.addObject(object);\r\n\r\n\t\t\tcontrollerScript.camera = camera;\r\n\t\t\tcamera.active = true;\r\n\t\t\t\r\n\t\t\tif (app.controllerScript) {\r\n\t\t\t\tapp.controllerScript.enabled = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// hack because existing FPS or model controller\r\n\t\t\t// will clobber our values\r\n\t\t\tapp.controller = controller;\r\n\t\t\tapp.controllerScript = controllerScript;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn null;\r\n}\r\n","/**\r\n * @fileoverview cube primitive parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Cube = {};\r\n\r\nglam.Cube.DEFAULT_WIDTH = 2;\r\nglam.Cube.DEFAULT_HEIGHT = 2;\r\nglam.Cube.DEFAULT_DEPTH = 2;\r\n\r\nglam.Cube.create = function(docelt, style) {\r\n\treturn glam.Visual.create(docelt, style, glam.Cube);\r\n}\r\n\r\nglam.Cube.getAttributes = function(docelt, style, param) {\r\n\r\n\tvar width = docelt.getAttribute('width') || glam.Cube.DEFAULT_WIDTH;\r\n\tvar height = docelt.getAttribute('height') || glam.Cube.DEFAULT_HEIGHT;\r\n\tvar depth = docelt.getAttribute('depth') || glam.Cube.DEFAULT_DEPTH;\r\n\t\r\n\tif (style) {\r\n\t\tif (style.width)\r\n\t\t\twidth = style.width\r\n\t\tif (style.height)\r\n\t\t\theight = style.height;\r\n\t\tif (style.depth)\r\n\t\t\tdepth = style.depth;\r\n\t}\r\n\t\r\n\twidth = parseFloat(width);\r\n\theight = parseFloat(height);\r\n\tdepth = parseFloat(depth);\r\n\t\r\n\tparam.width = width;\r\n\tparam.height = height;\r\n\tparam.depth = depth;\r\n}\r\n\r\nglam.Cube.createVisual = function(docelt, material, param) {\r\n\r\n\tvar visual = new Vizi.Visual(\r\n\t\t\t{ geometry: new THREE.BoxGeometry(param.width, param.height, param.depth),\r\n\t\t\t\tmaterial: material\r\n\t\t\t});\r\n\t\r\n\treturn visual;\r\n}\r\n","/**\r\n * @fileoverview cylinder parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Cylinder = {};\r\n\r\nglam.Cylinder.DEFAULT_RADIUS = 2;\r\nglam.Cylinder.DEFAULT_HEIGHT = 2;\r\n\r\nglam.Cylinder.create = function(docelt, style) {\r\n\treturn glam.Visual.create(docelt, style, glam.Cylinder);\r\n}\r\n\r\nglam.Cylinder.getAttributes = function(docelt, style, param) {\r\n\r\n\tvar radius = docelt.getAttribute('radius') || glam.Cylinder.DEFAULT_RADIUS;\r\n\tvar height = docelt.getAttribute('height') || glam.Cylinder.DEFAULT_HEIGHT;\r\n\t\r\n\tif (style) {\r\n\t\tif (style.radius)\r\n\t\t\tradius = style.radius;\r\n\t\tif (style.height)\r\n\t\t\theight = style.height;\r\n\t}\r\n\t\r\n\tradius = parseFloat(radius);\r\n\theight = parseFloat(height);\r\n\tparam.radius = radius;\r\n\tparam.height = height;\r\n}\t\r\n\r\nglam.Cylinder.createVisual = function(docelt, material, param) {\r\n\r\n\tvar visual = new Vizi.Visual(\r\n\t\t\t{ geometry: new THREE.CylinderGeometry(param.radius, param.radius, param.height, 32),\r\n\t\t\t\tmaterial: material\r\n\t\t\t});\r\n\t\r\n\treturn visual;\r\n}\r\n","/**\r\n * @fileoverview glam document class\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.document = {\r\n\t\t\r\n\tscenes : {},\r\n\t\r\n\tstyles : [],\r\n\r\n\tanimations : {},\r\n\t\r\n\taddScene : function(script, scene)\r\n\t{\r\n\t\tglam.document.scenes[script.id] = { parentElement : script.parentElement, scene : scene };\r\n\t},\r\n\r\n\taddStyle : function(declaration)\r\n\t{\r\n\t\tglam.document.styles.push(declaration);\r\n\t},\r\n\t\r\n\taddAnimation : function(id, animation)\r\n\t{\r\n\t\tglam.document.animations[id] = animation;\r\n\t},\r\n\r\n\tparseDocument : function()\r\n\t{\r\n\t\tvar dp = new DOMParser;\r\n\r\n\t\tvar i, len;\r\n\t\t\r\n\t\tvar scripts = document.getElementsByTagName(\"script\");\r\n\t\tvar len = scripts.length;\r\n\t\tfor (i = 0; i < len; i++)\r\n\t\t{\r\n\t\t\tif (scripts[i].type == \"text/glam\")\r\n\t\t\t{\r\n\t\t\t\tvar scene = dp.parseFromString(scripts[i].textContent, \"text/xml\");\r\n\t\t\t\tglam.document.addScene(scripts[i], scene);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar styles = document.head.getElementsByTagName(\"style\");\r\n\t\tvar len = styles.length;\r\n\t\tfor (i = 0; i < len; i++)\r\n\t\t{\r\n\t\t\t{\r\n\t\t\t\t$.parsecss(styles[i].childNodes[0].data,\r\n\t\t\t\t\t\tfunction(css) {\r\n\t\t\t\t\t\t\t\tglam.document.addStyle(css);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n};\r\n","/**\r\n * @fileoverview effect parser/implementation. supports built-in postprocessing effects\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Effect = {};\r\n\r\nglam.Effect.DEFAULT_BLOOM_STRENGTH = 1;\r\nglam.Effect.DEFAULT_FILM_GRAYSCALE = 0;\r\nglam.Effect.DEFAULT_FILM_SCANLINECOUNT = 512;\r\nglam.Effect.DEFAULT_FILM_INTENSITY = 0.5;\r\nglam.Effect.DEFAULT_RGBSHIFT_AMOUNT = 0.0015;\r\nglam.Effect.DEFAULT_DOTSCREEN_SCALE = 1;\r\n\r\nglam.Effect.create = function(docelt, style, app) {\r\n\t\r\n\tvar type = docelt.getAttribute(\"type\");\r\n\t\r\n\tvar effect = null;\r\n\t\r\n\tswitch (type) {\r\n\r\n\t\tcase \"Bloom\" :\r\n\t\t\tvar strength = glam.Effect.DEFAULT_BLOOM_STRENGTH;\r\n\t\t\tvar str = docelt.getAttribute(\"strength\");\r\n\t\t\tif (str != undefined) {\r\n\t\t\t\tstrength = parseFloat(str);\r\n\t\t\t}\r\n\t\t\teffect = new Vizi.Effect(new THREE.BloomPass(strength));\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"FXAA\" :\r\n\t\t\teffect = new Vizi.Effect(THREE.FXAAShader);\r\n\t\t\tvar w = Vizi.Graphics.instance.renderer.domElement.offsetWidth;\r\n\t\t\tvar h = Vizi.Graphics.instance.renderer.domElement.offsetHeight;\r\n\t\t\teffect.pass.uniforms['resolution'].value.set(1 / w, 1 / h);\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\tcase \"Film\" :\r\n\t\t\teffect = new Vizi.Effect( THREE.FilmShader );\r\n\t\t\teffect.pass.uniforms['grayscale'].value = glam.Effect.DEFAULT_FILM_GRAYSCALE;\r\n\t\t\teffect.pass.uniforms['sCount'].value = glam.Effect.DEFAULT_FILM_SCANLINECOUNT;\r\n\t\t\teffect.pass.uniforms['nIntensity'].value = glam.Effect.DEFAULT_FILM_INTENSITY;\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\tcase \"RGBShift\" :\r\n\t\t\teffect = new Vizi.Effect( THREE.RGBShiftShader );\r\n\t\t\teffect.pass.uniforms[ 'amount' ].value = glam.Effect.DEFAULT_RGBSHIFT_AMOUNT;\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\tcase \"DotScreen\" :\r\n\t\t\teffect = new Vizi.Effect(THREE.DotScreenShader);\r\n\t\t\teffect.pass.uniforms[ 'scale' ].value = glam.Effect.DEFAULT_DOTSCREEN_SCALE;\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"DotScreenRGB\" :\r\n\t\t\teffect = new Vizi.Effect(THREE.DotScreenRGBShader);\r\n\t\t\teffect.pass.uniforms[ 'scale' ].value = glam.Effect.DEFAULT_DOTSCREEN_SCALE;\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\tif (effect) {\r\n\t\tglam.Effect.parseAttributes(docelt, effect, style);\r\n\t\tVizi.Graphics.instance.addEffect(effect);\r\n\t}\r\n\t\r\n\treturn null;\r\n}\r\n\r\nglam.Effect.parseAttributes = function(docelt, effect, style) {\r\n\t\r\n\tvar disabled = docelt.getAttribute(\"disabled\");\r\n\tif (disabled != undefined) {\r\n\t\teffect.pass.enabled = false;\r\n\t}\r\n\t\r\n\tvar uniforms = effect.pass.uniforms;\r\n\t\r\n\tfor (var u in uniforms) {\r\n\t\t\r\n\t\tvar attr = docelt.getAttribute(u);\r\n\t\tif (attr) {\r\n\t\t\t\r\n\t\t\tvar value = null;\r\n\t\t\tvar uniform = uniforms[u];\r\n\r\n\t\t\tif (uniform) {\r\n\t\t\t\t\r\n\t\t\t\tswitch (uniform.type) {\r\n\t\t\t\t\r\n\t\t\t\t\tcase \"t\" :\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar image = glam.Material.parseUrl(attr);\r\n\t\t\t\t\t\tvalue = THREE.ImageUtils.loadTexture(image);\r\n\t\t\t\t\t\tvalue.wrapS = value.wrapT = THREE.Repeat;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tcase \"f\" :\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvalue = parseFloat(attr);\t\t\t\t\t\t\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"i\" :\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvalue = parseInt(attr);\t\t\t\t\t\t\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tuniform.value = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","/**\r\n * @fileoverview grouping element parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Group = {};\r\n\r\nglam.Group.create = function(docelt, style) {\r\n\r\n\t// Create the group\r\n\tvar group = new Vizi.Object;\r\n\t\r\n\treturn group;\r\n}\r\n","/**\r\n * @fileoverview model import parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Import = {};\r\n\r\nglam.Import.create = function(docelt, style) {\r\n\tvar src = docelt.getAttribute('src');\r\n\t\t\r\n\t// Create the cube\r\n\tvar obj = new Vizi.Object;\t\r\n\r\n\tif (src) {\r\n\t\tvar loader = new Vizi.Loader;\r\n\r\n\t\tvar loadCallback = function(data) {\r\n\t\t\tglam.Import.onLoadComplete(obj, data, src);\r\n\t\t\tloader.removeEventListener(\"loaded\", loadCallback);\r\n\t\t}\t\r\n\r\n\t\tloader.addEventListener(\"loaded\", loadCallback);\r\n\t\tloader.loadScene(src);\r\n\t}\r\n\r\n\treturn obj;\r\n}\r\n\r\nglam.Import.onLoadComplete = function(obj, data, url) {\r\n\r\n\tobj.addChild(data.scene);\r\n}\r\n","/**\r\n * @fileoverview mouse input implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Input = {};\r\n\r\nglam.Input.add = function(docelt, obj) {\r\n\t\r\n\tfunction addListener(picker, evt) {\r\n\t\tpicker.addEventListener(evt, function(event){\r\n\t\t\tvar domEvent = new CustomEvent(\r\n\t\t\t\t\tevt, \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdetail: {\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tbubbles: true,\r\n\t\t\t\t\t\tcancelable: true\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\tfor (propName in event) {\r\n\t\t\t\tdomEvent[propName] = event[propName];\r\n\t\t\t}\r\n\t\t\tvar res = docelt.dispatchEvent(domEvent);\r\n\t\t\t\r\n\t\t});\r\n\t}\r\n\t\r\n\tvar picker = new Vizi.Picker;\r\n\t\r\n\tvar events = [\"click\", \"mouseover\", \"mouseout\", \"mousedown\", \"mouseup\", \"mousemove\"];\r\n\tfor (index in events) {\r\n\t\tvar evt = events[index];\r\n\t\taddListener(picker, evt);\r\n\t}\r\n\t\t\r\n\tobj.addComponent(picker);\r\n\r\n\tvar viewpicker = new Vizi.ViewPicker;\r\n\tobj.addComponent(viewpicker);\r\n\taddListener(viewpicker, \"viewover\")\r\n\taddListener(viewpicker, \"viewout\");\r\n}\r\n","/**\r\n * @fileoverview light parser/implementation. supports point, spot, directional, ambient\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Light = {};\r\n\r\nglam.Light.DEFAULT_TYPE = \"directional\";\r\nglam.Light.DEFAULT_COLOR = \"#ffffff\";\r\nglam.Light.DEFAULT_ANGLE = \"90deg\";\r\nglam.Light.DEFAULT_DISTANCE = 0;\r\nglam.Light.DEFAULT_EXPONENT = Vizi.SpotLight.DEFAULT_EXPONENT;\r\n\r\nglam.Light.create = function(docelt, style, app) {\r\n\t\r\n\tfunction parseAngle(t) {\r\n\t\treturn glam.Transform.parseRotation(t);\r\n\t}\r\n\t\t\r\n\tvar type = docelt.getAttribute('type') || glam.Light.DEFAULT_TYPE;\r\n\tvar color = docelt.getAttribute('color') || glam.Light.DEFAULT_COLOR;\r\n\tvar angle = docelt.getAttribute('angle') || glam.Light.DEFAULT_ANGLE;\r\n\tvar distance = docelt.getAttribute('distance') || glam.Light.DEFAULT_DISTANCE;\r\n\tvar exponent = docelt.getAttribute('exponent') || glam.Light.DEFAULT_EXPONENT;\r\n\t\r\n\tvar direction = new THREE.Vector3(0, 0, -1);\r\n\t\r\n\tvar dx = parseFloat(docelt.getAttribute('dx')) || 0;\r\n\tvar dy = parseFloat(docelt.getAttribute('dy')) || 0;\r\n\tvar dz = parseFloat(docelt.getAttribute('dz')) || 0;\r\n\tif (dx || dy || dz) {\r\n\t\tdirection.set(dx, dy, dz);\r\n\t}\r\n\t\r\n\tdirection.normalize();\r\n\t\r\n\tif (style) {\r\n\t\tif (style.type) {\r\n\t\t\ttype = style.type;\r\n\t\t}\r\n\t\tif (style.color) {\r\n\t\t\tcolor = style.color;\r\n\t\t}\r\n\t\tif (style.angle) {\r\n\t\t\tangle = style.angle;\r\n\t\t}\r\n\t\tif (style.distance) {\r\n\t\t\tdistance = style.distance;\r\n\t\t}\r\n\t}\r\n\r\n\tcolor = new THREE.Color().setStyle(color).getHex(); \r\n\tangle = parseAngle(angle);\r\n\tdistance = parseFloat(distance);\r\n\texponent = parseFloat(exponent);\r\n\t\r\n\tvar param = {\r\n\t\t\tcolor : color,\r\n\t\t\tangle : angle,\r\n\t\t\tdirection : direction,\r\n\t\t\tdistance : distance,\r\n\t\t\texponent : exponent,\r\n\t};\r\n\t\r\n\tvar obj = new Vizi.Object;\r\n\r\n\tvar light = null;\r\n\tswitch (type.toLowerCase()) {\r\n\t\r\n\t\tcase 'directional' :\r\n\t\t\tlight = new Vizi.DirectionalLight(param);\r\n\t\t\tbreak;\r\n\t\tcase 'point' :\r\n\t\t\tlight = new Vizi.PointLight(param);\r\n\t\t\tbreak;\r\n\t\tcase 'spot' :\r\n\t\t\tlight = new Vizi.SpotLight(param);\r\n\t\t\tbreak;\r\n\t\tcase 'ambient' :\r\n\t\t\tlight = new Vizi.AmbientLight(param);\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\tif (light) {\r\n\t\tobj.addComponent(light);\r\n\t\treturn obj;\r\n\t}\r\n\t\r\n\treturn null;\r\n}\r\n","/**\r\n * @fileoverview line primitive parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Line = {};\r\n\r\nglam.Line.create = function(docelt, style) {\r\n\t\t\r\n\tif (style) {\r\n\t}\r\n\t\r\n\tvar material = glam.Material.create(style, null, \"line\");\r\n\t\r\n\tvar geometry = new THREE.Geometry;\r\n\t\r\n\tglam.Line.parse(docelt, geometry, material);\r\n\t\r\n\tvar line = new THREE.Line(geometry, material);\r\n\t\r\n\tvar obj = new Vizi.Object;\t\r\n\tvar visual = new Vizi.Visual(\r\n\t\t\t{\r\n\t\t\t\tobject : line,\r\n\t\t\t});\r\n\tobj.addComponent(visual);\r\n\r\n\t// Is this the API?\r\n\tdocelt.geometry = geometry;\r\n\tdocelt.material = material;\r\n\t\r\n\treturn obj;\r\n}\r\n\r\nglam.Line.parse = function(docelt, geometry, material) {\r\n\r\n\tvar verts = docelt.getElementsByTagName('vertices');\r\n\tif (verts) {\r\n\t\tverts = verts[0];\r\n\t\tglam.Types.parseVector3Array(verts, geometry.vertices);\r\n\t}\r\n\t\r\n\tvar vertexColors = [];\r\n\tvar colors = docelt.getElementsByTagName('colors');\r\n\tif (colors) {\r\n\t\tcolors = colors[0];\r\n\t\tif (colors) {\r\n\t\t\tglam.Types.parseColor3Array(colors, vertexColors);\r\n\t\r\n\t\t\tvar i, len = vertexColors.length;\r\n\t\r\n\t\t\tfor (i = 0; i < len; i++) {\t\t\t\r\n\t\t\t\tvar c = vertexColors[i];\r\n\t\t\t\tgeometry.colors.push(c.clone());\r\n\t\t\t}\r\n\t\r\n\t\t\tmaterial.vertexColors = THREE.VertexColors;\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n","/**\r\n * @fileoverview material parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Material = {};\r\n\r\nglam.Material.create = function(style, createCB, objtype) {\r\n\tvar material = null;\r\n\t\r\n\tif (style) {\r\n\t\tvar param = glam.Material.parseStyle(style);\r\n\t\tif (style.shader) {\r\n\t\t\tswitch (style.shader.toLowerCase()) {\r\n\t\t\t\tcase \"phong\" :\r\n\t\t\t\tcase \"blinn\" :\r\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial(param);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"lambert\" :\r\n\t\t\t\t\tmaterial = new THREE.MeshLambertMaterial(param);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"line\" :\r\n\t\t\t\t\tmaterial = new THREE.LineBasicMaterial(param);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"basic\" :\r\n\t\t\t\tdefault :\r\n\t\t\t\t\tmaterial = new THREE.MeshBasicMaterial(param);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (style[\"vertex-shader\"] && style[\"fragment-shader\"] && style[\"shader-uniforms\"]) {\r\n\t\t\tmaterial = glam.Material.createShaderMaterial(style, param, createCB);\r\n\t\t}\r\n\t\telse if (objtype == \"line\") {\r\n\t\t\tif (param.dashSize !== undefined  || param.gapSize !== undefined) {\r\n\t\t\t\tmaterial = new THREE.LineDashedMaterial(param);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaterial = new THREE.LineBasicMaterial(param);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmaterial = new THREE.MeshBasicMaterial(param);\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tmaterial = new THREE.MeshBasicMaterial();\r\n\t}\r\n\t\r\n\treturn material;\r\n}\r\n\r\nglam.Material.parseStyle = function(style) {\r\n\tvar image = \"\";\r\n\tif (style.image) {\r\n\t\timage = glam.Material.parseUrl(style.image);\r\n\t}\r\n\r\n\tvar normalMap = \"\";\r\n\tif (style[\"normal-image\"]) {\r\n\t\tnormalMap = glam.Material.parseUrl(style[\"normal-image\"]);\r\n\t}\r\n\r\n\tvar bumpMap = \"\";\r\n\tif (style[\"bump-image\"]) {\r\n\t\tbumpMap = glam.Material.parseUrl(style[\"bump-image\"]);\r\n\t}\r\n\r\n\tvar specularMap = \"\";\r\n\tif (style[\"specular-image\"]) {\r\n\t\tspecularMap = glam.Material.parseUrl(style[\"specular-image\"]);\r\n\t}\r\n\r\n\tvar reflectivity;\r\n\tif (style.reflectivity)\r\n\t\treflectivity = parseFloat(style.reflectivity);\r\n\t\r\n\tvar refractionRatio;\r\n\tif (style.refractionRatio)\r\n\t\trefractionRatio = parseFloat(style.refractionRatio);\r\n\t\r\n\tvar envMap = glam.Material.tryParseEnvMap(style);\r\n\t\r\n\tvar color;\r\n\tvar diffuse;\r\n\tvar specular;\r\n\tvar ambient;\r\n\tvar css = \"\";\r\n\r\n\tif (css = style[\"color\"]) {\r\n\t\tcolor = new THREE.Color().setStyle(css).getHex();\r\n\t}\r\n\tif (css = style[\"diffuse-color\"]) {\r\n\t\tdiffuse = new THREE.Color().setStyle(css).getHex();\r\n\t}\r\n\tif (css = style[\"specular-color\"]) {\r\n\t\tspecular = new THREE.Color().setStyle(css).getHex();\r\n\t}\r\n\tif (css = style[\"ambient-color\"]) {\r\n\t\tambient = new THREE.Color().setStyle(css).getHex();\r\n\t}\r\n\t\r\n\tvar opacity;\r\n\tif (style.opacity)\r\n\t\topacity = parseFloat(style.opacity);\r\n\r\n\tvar side = THREE.FrontSide;\r\n\tif (style[\"backface-visibility\"]) {\r\n\t\tswitch (style[\"backface-visibility\"].toLowerCase()) {\r\n\t\t\tcase \"visible\" :\r\n\t\t\t\tside = THREE.DoubleSide;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"hidden\" :\r\n\t\t\t\tside = THREE.FrontSide;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar wireframe;\r\n\tif (style.hasOwnProperty(\"render-mode\"))\r\n\t\twireframe = (style[\"render-mode\"] == \"wireframe\");\r\n\t\r\n\tvar linewidth;\r\n\tif (style[\"line-width\"]) {\r\n\t\tlinewidth = parseInt(style[\"line-width\"]);\r\n\t}\r\n\t\r\n\tvar dashSize;\r\n\tif (style[\"dash-size\"]) {\r\n\t\tdashSize = parseInt(style[\"dash-size\"]);\r\n\t}\r\n\r\n\tvar gapSize;\r\n\tif (style[\"gap-size\"]) {\r\n\t\tgapSize = parseInt(style[\"gap-size\"]);\r\n\t}\r\n\t\r\n\tvar param = {\r\n\t};\r\n\t\r\n\tif (image)\r\n\t\tparam.map = THREE.ImageUtils.loadTexture(image);\r\n\tif (envMap)\r\n\t\tparam.envMap = envMap;\r\n\tif (normalMap)\r\n\t\tparam.normalMap = THREE.ImageUtils.loadTexture(normalMap);\r\n\tif (bumpMap)\r\n\t\tparam.bumpMap = THREE.ImageUtils.loadTexture(bumpMap);\r\n\tif (specularMap)\r\n\t\tparam.specularMap = THREE.ImageUtils.loadTexture(specularMap);\r\n\tif (color !== undefined)\r\n\t\tparam.color = color;\r\n\tif (diffuse !== undefined)\r\n\t\tparam.color = diffuse;\r\n\tif (specular !== undefined)\r\n\t\tparam.specular = specular;\r\n\tif (ambient !== undefined)\r\n\t\tparam.ambient = ambient;\r\n\tif (opacity !== undefined) {\r\n\t\tparam.opacity = opacity;\r\n\t\tparam.transparent = opacity < 1;\r\n\t}\r\n\tif (wireframe !== undefined) {\r\n\t\tparam.wireframe = wireframe;\r\n\t}\r\n\tif (linewidth !== undefined) {\r\n\t\tparam.linewidth = linewidth;\r\n\t}\r\n\tif (dashSize !== undefined) {\r\n\t\tparam.dashSize = dashSize;\r\n\t}\r\n\tif (gapSize !== undefined) {\r\n\t\tparam.gapSize = gapSize;\r\n\t}\r\n\tif (reflectivity !== undefined)\r\n\t\tparam.reflectivity = reflectivity;\r\n\tif (refractionRatio !== undefined)\r\n\t\tparam.refractionRatio = refractionRatio;\r\n\r\n\tparam.side = side;\r\n\t\r\n\treturn param;\r\n}\r\n\r\nglam.Material.parseUrl = function(image) {\r\n\tvar regExp = /\\(([^)]+)\\)/;\r\n\tvar matches = regExp.exec(image);\r\n\timage = matches[1];\r\n\timage = image.replace(/'/g, \"\");\r\n\treturn image;\r\n}\r\n\r\nglam.Material.tryParseEnvMap = function(style) {\r\n\tvar urls = [];\r\n\t\r\n\tif (style[\"cube-image-right\"])\r\n\t\turls.push(glam.Material.parseUrl(style[\"cube-image-right\"]));\r\n\tif (style[\"cube-image-left\"])\r\n\t\turls.push(glam.Material.parseUrl(style[\"cube-image-left\"]));\r\n\tif (style[\"cube-image-top\"])\r\n\t\turls.push(glam.Material.parseUrl(style[\"cube-image-top\"]));\r\n\tif (style[\"cube-image-bottom\"])\r\n\t\turls.push(glam.Material.parseUrl(style[\"cube-image-bottom\"]));\r\n\tif (style[\"cube-image-front\"])\r\n\t\turls.push(glam.Material.parseUrl(style[\"cube-image-front\"]));\r\n\tif (style[\"cube-image-back\"])\r\n\t\turls.push(glam.Material.parseUrl(style[\"cube-image-back\"]));\r\n\t\r\n\tif (urls.length == 6) {\r\n\t\tvar cubeTexture = THREE.ImageUtils.loadTextureCube( urls );\r\n\t\treturn cubeTexture;\r\n\t}\r\n\t\r\n\tif (style[\"sphere-image\"])\r\n\t\treturn THREE.ImageUtils.loadTexture(glam.Material.parseUrl(style[\"sphere-image\"]), THREE.SphericalRefractionMapping);\r\n\t\r\n\treturn null;\r\n}\r\n\r\nglam.Material.createShaderMaterial = function(style, param, createCB) {\r\n\t\r\n\tfunction done() {\r\n\t\tvar material = new THREE.ShaderMaterial({\r\n\t\t\tvertexShader : vstext,\r\n\t\t\tfragmentShader : fstext,\r\n\t\t\tuniforms: uniforms,\r\n\t\t});\r\n\t\t\r\n\t\tglam.Material.saveShaderMaterial(vsurl, fsurl, material);\r\n\t\tglam.Material.callShaderMaterialCallbacks(vsurl, fsurl);\r\n\t}\r\n\t\r\n\tvar vs = style[\"vertex-shader\"];\r\n\tvar fs = style[\"fragment-shader\"];\r\n\tvar uniforms = glam.Material.parseUniforms(style[\"shader-uniforms\"], param);\r\n\r\n\tvar vsurl = glam.Material.parseUrl(vs);\r\n\tvar fsurl = glam.Material.parseUrl(fs);\r\n\r\n\tif (!vsurl || !fsurl) {\r\n\t\tvar vselt = document.getElementById(vs);\r\n\t\tvar vstext = vselt.textContent;\r\n\t\tvar fselt = document.getElementById(fs);\r\n\t\tvar fstext = fselt.textContent;\r\n\t\t\r\n\t\tif (vstext && fstext) {\r\n\t\t\treturn new THREE.ShaderMaterial({\r\n\t\t\t\tvertexShader : vstext,\r\n\t\t\t\tfragmentShader : fstext,\r\n\t\t\t\tuniforms: uniforms,\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tvar material = glam.Material.getShaderMaterial(vsurl, fsurl);\r\n\tif (material)\r\n\t\treturn material;\r\n\t\r\n\tglam.Material.addShaderMaterialCallback(vsurl, fsurl, createCB);\r\n\t\r\n\tif (glam.Material.getShaderMaterialLoading(vsurl, fsurl))\r\n\t\treturn;\r\n\t\r\n\tglam.Material.setShaderMaterialLoading(vsurl, fsurl);\r\n\t\r\n\tvar vstext = \"\";\r\n\tvar fstext = \"\";\r\n\t\r\n\t$.ajax({\r\n\t      type: 'GET',\r\n\t      url: vsurl,\r\n\t      dataType: \"text\",\r\n\t      success: function(result) { vstext = result; if (fstext) done(); },\r\n\t});\t\r\n\t\r\n\t\r\n\t$.ajax({\r\n\t      type: 'GET',\r\n\t      url: fsurl,\r\n\t      dataType: \"text\",\r\n\t      success: function(result) { fstext = result; if (vstext) done(); },\r\n\t});\t\r\n}\r\n\r\nglam.Material.parseUniforms = function(uniformsText, param) {\r\n\t\r\n\tvar uniforms = {\r\n\t};\r\n\t\r\n\tvar tokens = uniformsText.split(\" \");\r\n\r\n\tvar i, len = tokens.length / 3;\r\n\tfor (i = 0; i < len; i++) {\r\n\t\tvar name = tokens[i * 3];\r\n\t\tvar type = tokens[i * 3 + 1];\r\n\t\tvar value = tokens[i * 3 + 2];\r\n\t\t\r\n\t\tif (type == \"f\")\r\n\t\t\tvalue = parseFloat(value);\r\n\t\tif (type == \"c\") {\r\n\t\t\tvar c = new THREE.Color();\r\n\t\t\tc.setStyle(value);\r\n\t\t\tvalue = c;\r\n\t\t}\r\n\t\telse if (type == \"t\") {\r\n\t\t\tvalue = value.toLowerCase();\r\n\t\t\tif (value == \"cube\") {\r\n\t\t\t\tvalue = param.envMap;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar image = glam.Material.parseUrl(value);\r\n\t\t\t\tvalue = THREE.ImageUtils.loadTexture(image);\r\n\t\t\t\tvalue.wrapS = value.wrapT = THREE.Repeat;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar uniform =  {\r\n\t\t\ttype : type,\r\n\t\t\tvalue : value,\r\n\t\t};\r\n\t\t\r\n\t\tuniforms[name] = uniform;\r\n\t}\r\n\t\t\r\n\treturn uniforms;\r\n}\r\n\r\nglam.Material.shaderMaterials = {};\r\n\r\nglam.Material.saveShaderMaterial = function(vsurl, fsurl, material) {\r\n\tvar key = vsurl + fsurl;\r\n\tvar entry = glam.Material.shaderMaterials[key];\r\n\tentry.material = material;\r\n\tentry.loading = false;\r\n}\r\n\r\nglam.Material.addShaderMaterialCallback = function(vsurl, fsurl, cb) {\r\n\tvar key = vsurl + fsurl;\r\n\t\r\n\tvar entry = glam.Material.shaderMaterials[key];\r\n\tif (!entry) {\r\n\t\tglam.Material.shaderMaterials[key] = {\r\n\t\t\tmaterial : null,\r\n\t\t\tloading : false,\r\n\t\t\tcallbacks : [],\r\n\t\t};\r\n\t}\r\n\t\r\n\tglam.Material.shaderMaterials[key].callbacks.push(cb);\r\n}\r\n\r\nglam.Material.callShaderMaterialCallbacks = function(vsurl, fsurl) {\r\n\tvar key = vsurl + fsurl;\r\n\t\r\n\tvar entry = glam.Material.shaderMaterials[key];\r\n\tif (entry && entry.material) {\r\n\t\tfor (cb in entry.callbacks) {\r\n\t\t\tentry.callbacks[cb](entry.material);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nglam.Material.getShaderMaterial = function(vsurl, fsurl) {\r\n\t\r\n\tvar key = vsurl + fsurl;\r\n\tvar entry = glam.Material.shaderMaterials[key];\r\n\tif (entry) {\r\n\t\treturn entry.material;\r\n\t}\r\n\telse {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nglam.Material.setShaderMaterialLoading = function(vsurl, fsurl) {\r\n\t\r\n\tvar key = vsurl + fsurl;\r\n\tvar entry = glam.Material.shaderMaterials[key];\r\n\tif (entry) {\r\n\t\tentry.loading = true;\r\n\t}\r\n}\r\n\r\nglam.Material.getShaderMaterialLoading = function(vsurl, fsurl) {\r\n\t\r\n\tvar key = vsurl + fsurl;\r\n\tvar entry = glam.Material.shaderMaterials[key];\r\n\treturn (entry && entry.loading);\r\n}\r\n\r\nglam.Material.addHandlers = function(docelt, style, obj) {\r\n\r\n\tdocelt.glam.setAttributeHandlers.push(function(attr, val) {\r\n\t\tglam.Material.onSetAttribute(obj, docelt, attr, val);\r\n\t});\r\n\t\r\n\tstyle.setPropertyHandlers.push(function(attr, val) {\r\n\t\tglam.Material.onSetProperty(obj, docelt, attr, val);\r\n\t});\r\n}\r\n\r\nglam.Material.onSetAttribute = function(obj, docelt, attr, val) {\r\n\r\n\tvar material = obj.visuals[0].material;\r\n\tswitch (attr) {\r\n\t\tcase \"color\" :\r\n\t\tcase \"diffuse-color\" :\r\n\t\tcase \"diffuseColor\" :\r\n\t\t\tmaterial.color.setStyle(val);\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nglam.Material.onSetProperty = function(obj, docelt, attr, val) {\r\n\r\n\tvar material = obj.visuals[0].material;\r\n\tswitch (attr) {\r\n\t\tcase \"color\" :\r\n\t\tcase \"diffuse-color\" :\r\n\t\tcase \"diffuseColor\" :\r\n\t\t\tmaterial.color.setStyle(val);\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n","/**\r\n * @fileoverview mesh parser/implementation. currently only supports triangle sets\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Mesh = {};\r\nglam.Mesh.VERTEX_NORMALS = false;\r\nglam.Mesh.VERTEX_COLORS = false;\r\n\r\nglam.Mesh.create = function(docelt, style) {\r\n\t\r\n\treturn glam.Visual.create(docelt, style, glam.Mesh);\r\n}\r\n\r\nglam.Mesh.getAttributes = function(docelt, style, param) {\r\n\t\r\n\tvar vertexNormals = docelt.getAttribute('vertexNormals');\r\n\tif (vertexNormals !== null) {\r\n\t\tvertexNormals = true;\r\n\t}\r\n\telse {\r\n\t\tvertexNormals = glam.Mesh.VERTEX_NORMALS;\r\n\t}\r\n\t\r\n\tvar vertexColors = docelt.getAttribute('vertexColors');\r\n\tif (vertexColors !== null) {\r\n\t\tvertexColors = true;\r\n\t}\r\n\telse {\r\n\t\tvertexColors = glam.Mesh.VERTEX_COLORS;\r\n\t}\r\n\t\r\n\tif (style) {\r\n\t\tif (style.vertexNormals)\r\n\t\t\tvertexNormals = style.vertexNormals;\r\n\t\tif (style.vertexColors)\r\n\t\t\tvertexColors = style.vertexColors;\r\n\t}\r\n\t\r\n\tparam.vertexNormals = vertexNormals;\r\n\tparam.vertexColors = vertexColors;\r\n}\r\n\r\nglam.Mesh.createVisual = function(docelt, material, param) {\r\n\r\n\tvar geometry = new THREE.Geometry;\r\n\t\r\n\tglam.Mesh.parse(docelt, geometry, material, param);\r\n\t\r\n\tvar mesh = new THREE.Mesh(geometry, material);\r\n\tvar visual = new Vizi.Visual(\r\n\t\t\t{\r\n\t\t\t\tobject : mesh,\r\n\t\t\t});\r\n\t\r\n\treturn visual;\r\n}\r\n\r\nglam.Mesh.parse = function(docelt, geometry, material, param) {\r\n\r\n\tvar verts = docelt.getElementsByTagName('vertices');\r\n\tif (verts) {\r\n\t\tverts = verts[0];\r\n\t\tif (verts) {\r\n\t\t\tglam.Types.parseVector3Array(verts, geometry.vertices);\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar uvs = docelt.getElementsByTagName('uvs');\r\n\tif (uvs) {\r\n\t\tuvs = uvs[0];\r\n\t\tif (uvs) {\r\n\t\t\tglam.Types.parseUVArray(uvs, geometry.faceVertexUvs[0]);\r\n\t\t}\r\n\t}\r\n\r\n\tvar faces = docelt.getElementsByTagName('faces');\r\n\tif (faces) {\r\n\t\tfaces = faces[0];\r\n\t\tif (faces) {\r\n\t\t\tglam.Types.parseFaceArray(faces, geometry.faces);\r\n\t\t}\r\n\t}\r\n\r\n\tvar vertexNormals = [];\r\n\tvar normals = docelt.getElementsByTagName('normals');\r\n\tif (normals) {\r\n\t\tnormals = normals[0];\r\n\t\tif (normals) {\r\n\t\t\tglam.Types.parseVector3Array(normals, vertexNormals);\r\n\t\t\t\r\n\t\t\tif (param.vertexNormals) {\r\n\t\t\t\t\r\n\t\t\t\tvar i, len = geometry.faces.length;\r\n\t\r\n\t\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar face = geometry.faces[i];\r\n\t\t\t\t\tif (face) {\r\n\t\t\t\t\t\tvar norm = vertexNormals[face.a].normalize().clone();\r\n\t\t\t\t\t\tface.vertexNormals[0] = norm;\r\n\t\t\t\t\t\tvar norm = vertexNormals[face.b].normalize().clone();\r\n\t\t\t\t\t\tface.vertexNormals[1] = norm;\r\n\t\t\t\t\t\tvar norm = vertexNormals[face.c].normalize().clone();\r\n\t\t\t\t\t\tface.vertexNormals[2] = norm;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t\r\n\t\t\t\tvar i, len = geometry.faces.length;\r\n\t\r\n\t\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar face = geometry.faces[i];\r\n\t\t\t\t\tif (face) {\r\n\t\t\t\t\t\tvar norm = vertexNormals[i].normalize();\r\n\t\t\t\t\t\tface.normal.copy(norm);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar vertexColors = [];\r\n\tvar colors = docelt.getElementsByTagName('colors');\r\n\tif (colors) {\r\n\t\tcolors = colors[0];\r\n\t\tif (colors) {\r\n\t\t\tglam.Types.parseColor3Array(colors, vertexColors);\r\n\t\r\n\t\t\tif (param.vertexColors) {\r\n\t\r\n\t\t\t\tvar i, len = geometry.faces.length;\r\n\t\r\n\t\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar face = geometry.faces[i];\r\n\t\t\t\t\tif (face) {\r\n\t\t\t\t\t\tvar c = vertexColors[face.a];\r\n\t\t\t\t\t\tif (c) {\r\n\t\t\t\t\t\t\tface.vertexColors[0] = c.clone();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar c = vertexColors[face.b];\r\n\t\t\t\t\t\tif (c) {\r\n\t\t\t\t\t\t\tface.vertexColors[1] = c.clone();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar c = vertexColors[face.c];\r\n\t\t\t\t\t\tif (c) {\r\n\t\t\t\t\t\t\tface.vertexColors[2] = c.clone();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmaterial.vertexColors = THREE.VertexColors;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t\r\n\t\t\t\tvar i, len = geometry.faces.length;\r\n\t\r\n\t\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar face = geometry.faces[i];\r\n\t\t\t\t\tif (face) {\r\n\t\t\t\t\t\tvar c = vertexColors[i];\r\n\t\t\t\t\t\tif (c) {\r\n\t\t\t\t\t\t\tface.color.copy(c);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tmaterial.vertexColors = THREE.FaceColors; \r\n\t\t\t}\r\n\t\t\r\n\t\t\tgeometry.colorsNeedUpdate = true;\r\n\t\t\tgeometry.buffersNeedUpdate = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","/**\r\n * @fileoverview base node class\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Node = {};\r\n\r\n\r\nglam.Node.init = function(docelt) {\r\n\r\n\tdocelt.glam = {\r\n\t};\r\n\t\r\n\tdocelt.glam.setAttributeHandlers = [];\r\n\tdocelt.glam.onSetAttribute = function(attr, val) {\r\n\t\tvar i, len = docelt.glam.setAttributeHandlers.length;\r\n\t\tfor (i = 0; i < len; i++) {\r\n\t\t\tvar handler = docelt.glam.setAttributeHandlers[i];\r\n\t\t\tif (handler) {\r\n\t\t\t\thandler(attr, val);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nglam.Node.getStyle = function(docelt) {\r\n\t\r\n\tvar glamClassList = new glam.ClassList(docelt);\r\n\tdocelt.glam.classList = glamClassList;\r\n\t\r\n\tvar style = new glam.Style(docelt);\r\n\t\r\n\tif (docelt.id) {\r\n\t\tvar styl = glam.getStyle(\"#\" + docelt.id);\r\n\t\tstyle.addProperties(styl);\r\n\t}\r\n\t\r\n\tvar klass = docelt.getAttribute('class');\r\n\tif (!klass)\r\n\t\tklass = docelt['class'];\r\n\t\r\n\tif (klass) {\r\n\t\t\r\n\t\tvar klasses = klass.split(\" \");\r\n\t\tfor (klassname in klasses) {\r\n\t\t\tvar kls = klasses[klassname];\r\n\t\t\tif (kls) {\r\n\t\t\t\tvar styl = glam.getStyle(\".\" + kls);\r\n\t\t\t\tstyle.addProperties(styl);\r\n\t\t\t\t\r\n\t\t\t\tglamClassList.add(kls);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar styl = docelt.getAttribute(\"style\");\r\n\tif (styl) {\r\n\t\tstyle.addPropertiesFromString(styl);\r\n\t}\r\n\t\r\n\tdocelt.glam.style = style;\r\n\t\r\n\treturn style;\r\n}\r\n","/**\r\n * @fileoverview parser base; see also viewer.js\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.parser = {\r\n\t\t\r\n\taddDocument : function(doc)\r\n\t{\r\n\t\t// create an observer instance\r\n\t\tvar mo = (window.WebKitMutationObserver !== undefined) ? window.WebKitMutationObserver : window.MutationObserver;\r\n\t\tvar observer = new mo(function(mutations) {\r\n\t\t  mutations.forEach(function(mutation) {\r\n\t\t    if (mutation.type == \"childList\") {\r\n\t\t    \tvar i, len = mutation.addedNodes.length;\r\n\t\t    \tfor (i = 0; i < len; i++) {\r\n\t\t    \t\tvar node = mutation.addedNodes[i];\r\n\t\t    \t\tvar viewer = glam.viewers[doc.id];\r\n\t\t\t    \tviewer.addNode(node);\r\n\t\t    \t}\r\n\t\t    \tvar i, len = mutation.removedNodes.length;\r\n\t\t    \tfor (i = 0; i < len; i++) {\r\n\t\t    \t\tvar node = mutation.removedNodes[i];\r\n\t\t    \t\tvar viewer = glam.viewers[doc.id];\r\n\t\t\t    \tviewer.removeNode(node);\r\n\t\t    \t}\r\n\t\t    }\r\n\t\t    else if (mutation.type == \"attributes\") {\r\n\t\t    \tvar onSetAttribute = mutation.target.glam ? mutation.target.glam.onSetAttribute : null;\r\n\t\t    \tif (onSetAttribute) {\r\n\t\t    \t\tvar attr = mutation.attributeName;\r\n\t\t    \t\tvar val = mutation.target.getAttribute(attr);\r\n\t\t    \t\tonSetAttribute(attr, val);\r\n\t\t    \t}\r\n\t\t    }\r\n\t\t  });    \r\n\t\t});\r\n\t\t \r\n\t\t// configuration of the observer:\r\n\t\tvar config = { attributes: true, childList: true, characterData: true, subtree: true };\r\n\t\t \r\n\t\t// pass in the target node, as well as the observer options\r\n\t\tobserver.observe(doc, config);\t\t\r\n\t},\r\n\r\n\taddStyle : function(declaration)\r\n\t{\r\n\t\tfor (selector in declaration) {\r\n\t\t\tglam.addStyle(selector, declaration[selector]);\r\n\t\t}\r\n\t},\r\n\t\r\n\tgetStyle : function(selector)\r\n\t{\r\n\t\treturn glam.getStyle(selector);\r\n\t},\r\n\t\r\n\tparseDocument : function(doctoparse)\r\n\t{\r\n\t\tvar dp = new DOMParser;\r\n\r\n\t\tvar i, len;\r\n\t\t\r\n\t\tvar docs = doctoparse.getElementsByTagName(\"glam\");\r\n\t\tvar len = docs.length;\r\n\t\tfor (i = 0; i < len; i++)\r\n\t\t{\r\n\t\t\tvar doc = docs[i];\r\n\t\t\tif (!doc.id) {\r\n\t\t\t\tdoc.id = \"#glamDocument\" + glam.documentIndex++;\r\n\t\t\t}\r\n\t\t\tglam.parser.addDocument(doc);\r\n\t\t\tglam.documents[doc.id] = doc;\r\n\t\t\tdoc.style.display = 'none';\r\n\t\t\tglam.parser.addEventHandlers(doc);\r\n\t\t}\r\n\r\n\t\t// todo: not working for linked/external stylesheets (except in Polymer for some reason)\r\n\t\tvar styles = doctoparse.getElementsByTagName(\"style\"); // formerly document.head.... hopefully didn't screw anything up\r\n\t\tvar len = styles.length;\r\n\t\tfor (i = 0; i < len; i++)\r\n\t\t{\r\n\t\t\tif (styles[i].childNodes.length) {\r\n\t\t\t\t$.parsecss(styles[i].childNodes[0].data,\r\n\t\t\t\t\t\tfunction(css) {\r\n\t\t\t\t\t\t\t\tglam.parser.addStyle(css);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t\r\n\taddEventHandlers : function(elt) {\r\n\r\n\t\t// Trap all mouse events to keep page from going bonkers\r\n\t\telt.addEventListener(\"mouseover\", function(event) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tevent.stopPropagation();\r\n\t\t});\r\n\t\telt.addEventListener(\"mouseout\", function(event) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tevent.stopPropagation();\r\n\t\t});\r\n\t\telt.addEventListener(\"mousedown\", function(event) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tevent.stopPropagation();\r\n\t\t});\r\n\t\telt.addEventListener(\"mouseup\", function(event) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tevent.stopPropagation();\r\n\t\t});\r\n\t\telt.addEventListener(\"mousemove\", function(event) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tevent.stopPropagation();\r\n\t\t});\r\n\t\telt.addEventListener(\"click\", function(event) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tevent.stopPropagation();\r\n\t\t});\r\n\t\t\r\n\t},\r\n};\r\n\r\n","/**\r\n * @fileoverview particle system parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Particles = {};\r\n\r\nglam.Particles.create = function(docelt, style) {\r\n\r\n\tvar mparam = glam.Material.parseStyle(style);\r\n\r\n\t// Parse the attributes\r\n\tvar param = {};\r\n\tglam.Particles.getAttributes(docelt, style, param);\r\n\t\r\n\t// Throw in the texture from the material\r\n\tparam.map = mparam.map;      // for static geometry-based\r\n\tparam.texture = mparam.map;  // for dynamic emitter-based\r\n\tparam.color = mparam.color;\r\n\t\r\n\t// Parse the child elements\r\n\tvar elts = glam.Particles.parse(docelt);\r\n\t\r\n\t// Got geometry in there? Pass it on\r\n\tparam.geometry = elts.geometry;\r\n\r\n\t// Create the particle system\r\n\tvar ps = Vizi.ParticleSystem(param);\r\n\r\n\t// Got emitters in there? Add them\r\n\tglam.Particles.addEmitters(elts.emitters, ps);\r\n\r\n\t// Bind the properties\r\n\tvar visual = ps.getComponent(Vizi.Visual);\r\n\tdocelt.geometry = visual.geometry;\r\n\tdocelt.material = visual.material;\r\n\t\r\n\t// Start it\r\n\tvar pscript = ps.getComponent(Vizi.ParticleSystemScript);\t\r\n\tpscript.active = true;\r\n\treturn ps;\r\n}\r\n\r\nglam.Particles.getAttributes = function(docelt, style, param) {\r\n\tvar maxAge = docelt.getAttribute('maxAge') || glam.Particles.DEFAULT_MAX_AGE;\r\n\tvar size = parseFloat(docelt.getAttribute('size'));\r\n\r\n\tparam.maxAge = parseFloat(maxAge);\r\n\tparam.size = size;\r\n}\r\n\r\nglam.Particles.parse = function(docelt) {\r\n\t\r\n\tvar result = {\r\n\t\t\tgeometry : null,\r\n\t\t\temitters : [\r\n\t\t\t            ],\r\n\t};\r\n\t\r\n\t// Any emitters?\r\n\tvar emitters = docelt.getElementsByTagName('emitter');\r\n\tif (emitters) {\r\n\t\tvar i, len = emitters.length;\r\n\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\r\n\t\t\tvar param = {\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tvar emitter = emitters[i];\r\n\t\t\tif (emitter) {\r\n\t\t\t\tglam.Particles.parseEmitter(emitter, param);\r\n\r\n\t\t\t\tvar pe = new Vizi.ParticleEmitter(param);\r\n\t\t\t\tresult.emitters.push(pe);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Or just static vertices...? Not working yet\r\n\tvar verts = docelt.getElementsByTagName('vertices');\r\n\tif (verts) {\r\n\t\tverts = verts[0];\r\n\t\tif (verts) {\r\n\t\t\tvar geometry = new THREE.Geometry;\r\n\t\t\tglam.Types.parseVector3Array(verts, geometry.vertices);\r\n\t\t\tresult.geometry = geometry;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn result;\r\n}\r\n\r\nglam.Particles.parseEmitter = function(emitter, param) {\r\n\t    \r\n\tvar size = parseFloat(emitter.getAttribute('size'));\r\n\tvar sizeEnd = parseFloat(emitter.getAttribute('sizeEnd'));\r\n\tvar particlesPerSecond = parseInt(emitter.getAttribute('particlesPerSecond'));\r\n\tvar opacityStart = parseFloat(emitter.getAttribute('opacityStart'));\r\n\tvar opacityMiddle = parseFloat(emitter.getAttribute('opacityMiddle'));\r\n\tvar opacityEnd = parseFloat(emitter.getAttribute('opacityEnd'));\r\n\t\r\n\tvar colorStart, colorEnd;\r\n\tif (css = emitter.getAttribute('colorStart')) {\r\n\t\tcolorStart = new THREE.Color().setStyle(css);\r\n\t}\r\n\tif (css = emitter.getAttribute('colorEnd')) {\r\n\t\tcolorEnd = new THREE.Color().setStyle(css);\r\n\t}\r\n\t\r\n\tvar vx = parseFloat(emitter.getAttribute('vx')) || 0;\r\n\tvar vy = parseFloat(emitter.getAttribute('vy')) || 0;\r\n\tvar vz = parseFloat(emitter.getAttribute('vz')) || 0;\r\n\tvar ax = parseFloat(emitter.getAttribute('ax')) || 0;\r\n\tvar ay = parseFloat(emitter.getAttribute('ay')) || 0;\r\n\tvar az = parseFloat(emitter.getAttribute('az')) || 0;\r\n\tvar psx = parseFloat(emitter.getAttribute('psx')) || 0;\r\n\tvar psy = parseFloat(emitter.getAttribute('psy')) || 0;\r\n\tvar psz = parseFloat(emitter.getAttribute('psz')) || 0;\r\n\tvar asx = parseFloat(emitter.getAttribute('asx')) || 0;\r\n\tvar asy = parseFloat(emitter.getAttribute('asy')) || 0;\r\n\tvar asz = parseFloat(emitter.getAttribute('asz')) || 0;\r\n\r\n\tvar velocity = new THREE.Vector3(vx, vy, vz);\r\n\tvar acceleration = new THREE.Vector3(ax, ay, az);\r\n\tvar positionSpread = new THREE.Vector3(psx, psy, psz);\r\n\tvar accelerationSpread = new THREE.Vector3(asx, asy, asz);\r\n\r\n\tvar vel = emitter.getAttribute('velocity');\r\n\tif (vel) {\r\n\t\tglam.Types.parseVector3(vel, velocity);\r\n\t}\r\n\t\r\n\tvar accel = emitter.getAttribute('acceleration');\r\n\tif (accel) {\r\n\t\tglam.Types.parseVector3(accel, acceleration);\r\n\t}\r\n\t\r\n\tvar posSpread = emitter.getAttribute('positionSpread');\r\n\tif (posSpread) {\r\n\t\tglam.Types.parseVector3(posSpread, positionSpread);\r\n\t}\r\n\r\n\tvar accelSpread = emitter.getAttribute('accelerationSpread');\r\n\tif (accelSpread) {\r\n\t\tglam.Types.parseVector3(accelSpread, accelerationSpread);\r\n\t}\r\n\r\n\tvar blending = THREE.NoBlending;\r\n\tvar blend = emitter.getAttribute('blending') || \"\";\r\n\tswitch (blend.toLowerCase()) {\r\n\t\r\n\t\tcase \"normal\" :\r\n\t\t\tblending = THREE.NormalBlending;\r\n\t\t\tbreak;\r\n\t\tcase \"additive\" :\r\n\t\t\tblending = THREE.AdditiveBlending;\r\n\t\t\tbreak;\r\n\t\tcase \"subtractive\" :\r\n\t\t\tblending = THREE.SubtractiveBlending;\r\n\t\t\tbreak;\r\n\t\tcase \"multiply\" :\r\n\t\t\tblending = THREE.MultiplyBlending;\r\n\t\t\tbreak;\r\n\t\tcase \"custom\" :\r\n\t\t\tblending = THREE.CustomBlending;\r\n\t\t\tbreak;\r\n\t\tcase \"none\" :\r\n\t\tdefault :\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\tparam.size = size;\r\n\tparam.sizeEnd = sizeEnd;\r\n\tif (colorStart !== undefined) {\r\n\t\tparam.colorStart = colorStart;\r\n\t}\r\n\tif (colorEnd !== undefined) {\r\n\t\tparam.colorEnd = colorEnd;\r\n\t}\t\r\n\tparam.particlesPerSecond = particlesPerSecond;\t\r\n\tparam.opacityStart = opacityStart;\r\n\tparam.opacityMiddle = opacityMiddle;\r\n\tparam.opacityEnd = opacityEnd;\r\n\tparam.velocity = velocity;\r\n\tparam.acceleration = acceleration;\r\n\tparam.positionSpread = positionSpread;\r\n\tparam.accelerationSpread = accelerationSpread; \r\n\tparam.blending = blending;\r\n}\r\n\r\nglam.Particles.addEmitters = function(emitters, ps) {\r\n\t\r\n\tvar i, len = emitters.length;\r\n\tfor (i = 0; i < len; i++) {\r\n\t\tps.addComponent(emitters[i]);\r\n\t}\r\n}\r\n\r\nglam.Particles.DEFAULT_MAX_AGE = 1;\r\n\r\n","/**\r\n * @fileoverview 2D rectangle parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Rect = {};\r\n\r\nglam.Rect.DEFAULT_WIDTH = 2;\r\nglam.Rect.DEFAULT_HEIGHT = 2;\r\nglam.Rect.DEFAULT_WIDTH_SEGMENTS = 1;\r\nglam.Rect.DEFAULT_HEIGHT_SEGMENTS = 1;\r\n\r\nglam.Rect.create = function(docelt, style) {\r\n\treturn glam.Visual.create(docelt, style, glam.Rect);\r\n}\r\n\r\nglam.Rect.getAttributes = function(docelt, style, param) {\r\n\r\n\tvar width = docelt.getAttribute('width') || glam.Rect.DEFAULT_WIDTH;\r\n\tvar height = docelt.getAttribute('height') || glam.Rect.DEFAULT_HEIGHT;\r\n\tvar widthSegments = docelt.getAttribute('width') || glam.Rect.DEFAULT_WIDTH_SEGMENTS;\r\n\tvar heightSegments = docelt.getAttribute('height') || glam.Rect.DEFAULT_HEIGHT_SEGMENTS;\r\n\t\r\n\tif (style) {\r\n\t\tif (style.width)\r\n\t\t\twidth = style.width;\r\n\t\tif (style.height)\r\n\t\t\theight = style.height;\r\n\t\tif (style.widthSegments)\r\n\t\t\twidthSegments = style.widthSegments;\r\n\t\tif (style.heightSegments)\r\n\t\t\theightSegments = style.heightSegments;\r\n\t}\r\n\t\r\n\twidth = parseFloat(width);\r\n\theight = parseFloat(height);\r\n\twidthSegments = parseInt(widthSegments);\r\n\theightSegments = parseInt(heightSegments);\r\n\r\n\tparam.width = width;\r\n\tparam.height = height;\r\n\tparam.widthSegments = widthSegments;\r\n\tparam.heightSegments = heightSegments;\r\n}\r\n\r\nglam.Rect.createVisual = function(docelt, material, param) {\r\n\r\n\tvar visual = new Vizi.Visual(\r\n\t\t\t{ geometry: new THREE.PlaneGeometry(param.width, param.height, param.widthSegments, param.heightSegments),\r\n\t\t\t\tmaterial: material\r\n\t\t\t});\r\n\r\n\treturn visual;\r\n}\r\n","/**\r\n * @fileoverview renderer parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.renderer = {\r\n};\r\n","/**\r\n * @fileoverview sphere primitive parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Sphere = {};\r\n\r\nglam.Sphere.DEFAULT_RADIUS = 2;\r\nglam.Sphere.DEFAULT_WIDTH_SEGMENTS = 32;\r\nglam.Sphere.DEFAULT_HEIGHT_SEGMENTS = 32;\r\n\r\nglam.Sphere.create = function(docelt, style) {\r\n\treturn glam.Visual.create(docelt, style, glam.Sphere);\r\n}\r\n\r\nglam.Sphere.getAttributes = function(docelt, style, param) {\r\n\t\r\n\tvar radius = docelt.getAttribute('radius') || glam.Sphere.DEFAULT_RADIUS;\r\n\tvar widthSegments = docelt.getAttribute('width-segments') || glam.Sphere.DEFAULT_WIDTH_SEGMENTS;\r\n\tvar heightSegments = docelt.getAttribute('height-segments') || glam.Sphere.DEFAULT_HEIGHT_SEGMENTS;\r\n\t\r\n\tif (style) {\r\n\t\tif (style.radius)\r\n\t\t\tradius = style.radius;\r\n\t\tif (style.widthSegments || style[\"width-segments\"])\r\n\t\t\twidthSegments = style.widthSegments || style[\"width-segments\"];\r\n\t\tif (style.heightSegments || style[\"height-segments\"])\r\n\t\t\theightSegments = style.heightSegments || style[\"height-segments\"];\r\n\t}\r\n\r\n\tradius = parseFloat(radius);\r\n\twidthSegments = parseInt(widthSegments);\r\n\theightSegments = parseInt(heightSegments);\r\n\t\r\n\tparam.radius = radius;\r\n\tparam.widthSegments = widthSegments;\r\n\tparam.heightSegments = heightSegments;\r\n}\r\n\r\nglam.Sphere.createVisual = function(docelt, material, param) {\r\n\r\n\tvar visual = new Vizi.Visual(\r\n\t\t\t{ geometry: new THREE.SphereGeometry(param.radius, param.widthSegments, param.heightSegments),\r\n\t\t\t\tmaterial: material\r\n\t\t\t});\r\n\t\r\n\treturn visual;\r\n}\r\n","/**\r\n * @fileoverview styles support - emulate built-in DOM style object\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Style = function(docelt) {\r\n\r\n\tthis.docelt = docelt;\r\n\tthis._properties = {\r\n\t};\r\n\t\r\n\tthis.setPropertyHandlers = [];\r\n\tthis.defineStandardProperties();\r\n}\r\n\r\nglam.Style.prototype = new Object;\r\n\r\nglam.Style.prototype.addProperties = function(props) {\r\n\tfor (p in props) {\r\n\t\tthis.addProperty(p, props[p]);\r\n\t}\r\n}\r\n\r\nglam.Style.prototype.addProperty = function(propName, propValue) {\r\n\r\n\tthis.defineProperty(propName, propValue);\r\n\r\n\tthis._properties[propName] = propValue;\r\n}\r\n\r\nglam.Style.prototype.addPropertiesFromString = function(str) {\r\n\tvar propstrs = str.split(';');\r\n\tvar props = {\r\n\t};\r\n\t\r\n\tvar i, len = propstrs.length;\r\n\tfor (i = 0; i < len; i++) {\r\n\t\tvar prop = propstrs[i];\r\n\t\tvar elts = prop.split(':');\r\n\t\tvar propName = elts[0];\r\n\t\tpropName = propName.replace(/ /g,'');\r\n\t\tif (propName) {\r\n\t\t\tvar propValue = elts[1];\r\n\t\t\tprops[propName] = propValue;\r\n\t\t}\r\n\t}\r\n\t\r\n\tthis.addProperties(props);\r\n}\r\n\r\nglam.Style.prototype.onPropertyChanged = function(propName, propValue) {\r\n\r\n\t// console.log(this.docelt.id, \"property\", propName, \"value changed to\", propValue);\r\n\r\n\tvar i, len = this.setPropertyHandlers.length;\r\n\tfor (i = 0; i < len; i++) {\r\n\t\tvar handler = this.setPropertyHandlers[i];\r\n\t\tif (handler) {\r\n\t\t\thandler(propName, propValue);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nglam.Style.prototype.defineProperty = function(propName, propValue) {\r\n\tObject.defineProperty(this, propName, {\r\n\t\t\tenumerable : true,\r\n\t\t\tconfigurable : true,\r\n\t        get: function() {\r\n\t            return this._properties[propName];\r\n\t        },\r\n\t        set: function(v) {\r\n\t        \tthis._properties[propName] = v;\r\n\t        \tthis.onPropertyChanged(propName, v);\r\n\t        }\r\n\t\t});\r\n}\r\n\r\nglam.Style.prototype.defineStandardProperties = function() {\r\n\r\n\tvar props = glam.Style._standardProperties\r\n\tvar propName;\r\n\tfor (propName in props) {\r\n\t\tvar propValue = props[propName];\r\n\t\tthis.defineProperty(propName, propValue)\r\n\t}\r\n}\r\n\r\nglam.Style._standardProperties = {\r\n\t\t\"angle\" : \"\",\r\n\t\t\"backface-visibility\" : \"visible\",\r\n\t\t\"background-type\" : \"\",\r\n\t\t\"bevel-size\" : \"\",\r\n\t\t\"bevel-thickness\" : \"\",\r\n\t\t\"color\" : \"\",\r\n\t\t\"diffuse-color\" : \"\",\r\n\t\t\"diffuseColor\" : \"\",\r\n\t\t\"specular-color\" : \"\",\r\n\t\t\"specularColor\" : \"\",\r\n\t\t\"dash-size\" : \"\",\r\n\t\t\"depth\" : \"\",\r\n\t\t\"distance\" : \"\",\r\n\t\t\"end-angle\" : \"\",\r\n\t\t\"cube-image-back\" : \"\",\r\n\t\t\"cube-image-bottom\" : \"\",\r\n\t\t\"cube-image-front\" : \"\",\r\n\t\t\"cube-image-left\" : \"\",\r\n\t\t\"cube-image-right\" : \"\",\r\n\t\t\"cube-image-top\" : \"\",\r\n\t\t\"sphere-image\" : \"\",\r\n\t\t\"sphereImage\" : \"\",\r\n\t\t\"font-bevel\" : \"\",\r\n\t\t\"font-depth\" : \"\",\r\n\t\t\"font-family\" : \"\",\r\n\t\t\"font-size\" : \"\",\r\n\t\t\"font-style\" : \"\",\r\n\t\t\"font-weight\" : \"\",\r\n\t\t\"gap-size\" : \"\",\r\n\t\t\"height\" : \"\",\r\n\t\t\"line-width\" : \"\",\r\n\t\t\"image\" : \"\",\r\n\t\t\"normal-image\" : \"\",\r\n\t\t\"bump-image\" : \"\",\r\n\t\t\"specular-image\" : \"\",\r\n\t\t\"opacity\" : \"\",\r\n\t\t\"radius\" : \"\",\r\n\t\t\"radius-segments\" : \"\",\r\n\t\t\"width-segments\" : \"\",\r\n\t\t\"height-segments\" : \"\",\r\n\t\t\"reflectivity\" : \"\",\r\n\t\t\"refraction-ratio\" : \"\",\r\n\t\t\"render-mode\" : \"\",\r\n\t\t\"rx\" : \"\",\r\n\t\t\"ry\" : \"\",\r\n\t\t\"rz\" : \"\",\r\n\t\t\"shader\" : \"phong\",\r\n\t\t\"fragment-shader\" : \"\",\r\n\t\t\"vertex-shader\" : \"\",\r\n\t\t\"shader-uniforms\" : \"\",\r\n\t\t\"start-angle\" : \"\",\r\n\t\t\"sx\" : \"\",\r\n\t\t\"sy\" : \"\",\r\n\t\t\"sz\" : \"\",\r\n\t\t\"vertex-colors\" : \"\",\r\n\t\t\"vertex-normals\" : \"\",\r\n\t\t\"width\" : \"\",\r\n\t\t\"x\" : \"\",\r\n\t\t\"y\" : \"\",\r\n\t\t\"z\" : \"\",\r\n};\r\n\r\n","/**\r\n * @fileoverview text primitive parser/implementation. only supports helvetiker and optimer fonts right now.\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Text = {};\r\n\r\nglam.Text.DEFAULT_FONT_SIZE = 1;\r\nglam.Text.DEFAULT_FONT_DEPTH = .2;\r\nglam.Text.DEFAULT_FONT_BEVEL = \"none\";\r\nglam.Text.DEFAULT_BEVEL_SIZE = .01;\r\nglam.Text.DEFAULT_BEVEL_THICKNESS = .02;\r\nglam.Text.DEFAULT_FONT_FAMILY = \"helvetica\";\r\nglam.Text.DEFAULT_FONT_WEIGHT = \"normal\";\r\nglam.Text.DEFAULT_FONT_STYLE = \"normal\";\r\n\r\nglam.Text.BEVEL_EPSILON = 0.0001;\r\n\r\nglam.Text.DEFAULT_VALUE = \"\",\r\n\r\nglam.Text.create = function(docelt, style) {\r\n\treturn glam.Visual.create(docelt, style, glam.Text);\r\n}\r\n\r\nglam.Text.getAttributes = function(docelt, style, param) {\r\n\r\n\t// Font stuff\r\n\t// for now: helvetiker, optimer - typeface.js stuff\r\n\t// could also do: gentilis, droid sans, droid serif but the files are big.\r\n\tvar fontFamily = docelt.getAttribute('fontFamily') || glam.Text.DEFAULT_FONT_FAMILY; // \"optimer\";\r\n\tvar fontWeight = docelt.getAttribute('fontWeight') || glam.Text.DEFAULT_FONT_WEIGHT; // \"bold\"; // normal bold\r\n\tvar fontStyle = docelt.getAttribute('fontStyle') || glam.Text.DEFAULT_FONT_STYLE; // \"normal\"; // normal italic\r\n\r\n\t// Size, depth, bevel etc.\r\n\tvar fontSize = docelt.getAttribute('fontSize') || glam.Text.DEFAULT_FONT_SIZE;\r\n\tvar fontDepth = docelt.getAttribute('fontDepth') || glam.Text.DEFAULT_FONT_DEPTH;\r\n\tvar fontBevel = docelt.getAttribute('fontBevel') || glam.Text.DEFAULT_FONT_BEVEL;\r\n\tvar bevelSize = docelt.getAttribute('bevelSize') || glam.Text.DEFAULT_BEVEL_SIZE;\r\n\tvar bevelThickness = docelt.getAttribute('bevelThickness') || glam.Text.DEFAULT_BEVEL_THICKNESS;\r\n\t\r\n\tif (style) {\r\n\t\tif (style[\"font-family\"])\r\n\t\t\tfontFamily = style[\"font-family\"];\r\n\t\tif (style[\"font-weight\"])\r\n\t\t\tfontWeight = style[\"font-weight\"];\r\n\t\tif (style[\"font-style\"])\r\n\t\t\tfontStyle = style[\"font-style\"];\r\n\t\tif (style[\"font-size\"])\r\n\t\t\tfontSize = style[\"font-size\"];\r\n\t\tif (style[\"font-depth\"])\r\n\t\t\tfontDepth = style[\"font-depth\"];\r\n\t\tif (style[\"font-bevel\"])\r\n\t\t\tfontBevel = style[\"font-bevel\"];\r\n\t\tif (style[\"bevel-size\"])\r\n\t\t\tbevelSize = style[\"bevel-size\"];\r\n\t\tif (style[\"bevel-thickness\"])\r\n\t\t\tbevelThickness = style[\"bevel-thickness\"];\r\n\t}\r\n\r\n\t// set up defaults, safeguards; convert to typeface.js names\r\n\tfontFamily = fontFamily.toLowerCase();\r\n\tswitch (fontFamily) {\r\n\t\tcase \"optima\" :\r\n\t\t\tfontFamily = \"optimer\"; \r\n\t\t\tbreak;\r\n\t\tcase \"helvetica\" :\r\n\t\tdefault :\r\n\t\t\tfontFamily = \"helvetiker\"; \r\n\t\t\tbreak;\r\n\t}\r\n\r\n\t// final safeguard, make sure font is there. if not, use helv\r\n\tvar face = THREE.FontUtils.faces[fontFamily];\r\n\tif (!face) {\r\n\t\tfontFamily = \"helvetiker\"; \r\n\t}\r\n\t\r\n\tfontWeight = fontWeight.toLowerCase();\r\n\tif (fontWeight != \"bold\") {\r\n\t\tfontWeight = \"normal\";\r\n\t}\r\n\r\n\tfontStyle = fontStyle.toLowerCase();\r\n\t// N.B.: for now, just use normal, italic doesn't seem to work \r\n\tif (true) { // fontStyle != \"italic\") {\r\n\t\tfontStyle = \"normal\";\r\n\t}\r\n\t\r\n\tfontSize = parseFloat(fontSize);\r\n\tfontDepth = parseFloat(fontDepth);\r\n\tbevelSize = parseFloat(bevelSize);\r\n\tbevelThickness = parseFloat(bevelThickness);\r\n\tbevelEnabled = (fontBevel.toLowerCase() == \"bevel\") ? true : false;\r\n\tif (!fontDepth) {\r\n\t\tbevelEnabled = false;\r\n\t}\r\n\t// hack because no-bevel shading has bad normals along text edge\r\n\tif (!bevelEnabled) {\r\n\t\tbevelThickness = bevelSize = glam.Text.BEVEL_EPSILON;\r\n\t\tbevelEnabled = true;\r\n\t}\r\n\r\n\t// The text value\r\n\tvar value = docelt.getAttribute('value') || glam.Text.DEFAULT_VALUE;\r\n\r\n\tif (!value) {\r\n\t\tvalue = docelt.textContent;\r\n\t}\r\n\t\r\n\tparam.value = value;\r\n\tparam.fontSize = fontSize;\r\n\tparam.fontDepth = fontDepth;\r\n\tparam.bevelSize = bevelSize;\r\n\tparam.bevelThickness = bevelThickness;\r\n\tparam.bevelEnabled = bevelEnabled;\r\n\tparam.fontFamily = fontFamily;\r\n\tparam.fontWeight = fontWeight;\r\n\tparam.fontStyle = fontStyle;\r\n}\r\n\r\nglam.Text.createVisual = function(docelt, material, param) {\r\n\r\n\tif (!param.value) {\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\tvar curveSegments = 4;\r\n\r\n\tvar textGeo = new THREE.TextGeometry( param.value, {\r\n\r\n\t\tfont: param.fontFamily,\r\n\t\tweight: param.fontWeight,\r\n\t\tstyle: param.fontStyle,\r\n\r\n\t\tsize: param.fontSize,\r\n\t\theight: param.fontDepth,\r\n\t\tcurveSegments: curveSegments,\r\n\r\n\t\tbevelThickness: param.bevelThickness,\r\n\t\tbevelSize: param.bevelSize,\r\n\t\tbevelEnabled: param.bevelEnabled,\r\n\r\n\t\tmaterial: 0,\r\n\t\textrudeMaterial: 1\r\n\r\n\t});\r\n\r\n\ttextGeo.computeBoundingBox();\r\n\ttextGeo.computeVertexNormals();\r\n\r\n\tvar frontMaterial = material.clone();\r\n\tfrontMaterial.shading = THREE.FlatShading;\r\n\tvar extrudeMaterial = material.clone();\r\n\textrudeMaterial.shading = THREE.SmoothShading;\r\n\tvar textmat = new THREE.MeshFaceMaterial( [ frontMaterial,  // front\r\n\t                                            extrudeMaterial // side\r\n\t                                            ]);\r\n\r\n\r\n\tvar visual = new Vizi.Visual(\r\n\t\t\t{ geometry: textGeo,\r\n\t\t\t\tmaterial: textmat\r\n\t\t\t});\r\n\r\n\ttextGeo.center();\r\n\t\r\n\treturn visual;\r\n}\r\n","/**\r\n * @fileoverview transform properties parser/implementation\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Transform = {};\r\n\r\nglam.Transform.parse = function(docelt, style, obj) {\r\n\t\r\n\tvar t = {\r\n\t};\r\n\t\r\n\tt.x = parseFloat(docelt.getAttribute('x')) || 0;\r\n\tt.y = parseFloat(docelt.getAttribute('y')) || 0;\r\n\tt.z = parseFloat(docelt.getAttribute('z')) || 0;\r\n\tt.rx = glam.Transform.parseRotation(docelt.getAttribute('rx')) || 0;\r\n\tt.ry = glam.Transform.parseRotation(docelt.getAttribute('ry')) || 0;\r\n\tt.rz = glam.Transform.parseRotation(docelt.getAttribute('rz')) || 0;\r\n\tt.sx = parseFloat(docelt.getAttribute('sx')) || 1;\r\n\tt.sy = parseFloat(docelt.getAttribute('sy')) || 1;\r\n\tt.sz = parseFloat(docelt.getAttribute('sz')) || 1;\r\n\tvar transform = docelt.getAttribute('transform');\r\n\tif (transform) {\r\n\t\tglam.Transform.parseTransform(transform, t);\r\n\t}\r\n\r\n\tif (style) {\r\n\t\tglam.Transform.parseStyle(style, t);\r\n\t}\r\n\t\r\n\tobj.transform.position.set(t.x, t.y, t.z);\r\n\tobj.transform.rotation.set(t.rx, t.ry, t.rz);\r\n\tobj.transform.scale.set(t.sx, t.sy, t.sz);\r\n\t\r\n\tdocelt.glam.setAttributeHandlers.push(function(attr, val) {\r\n\t\tglam.Transform.onSetAttribute(obj, docelt, attr, val);\r\n\t});\r\n\r\n\tstyle.setPropertyHandlers.push(function(attr, val) {\r\n\t\tglam.Transform.onSetAttribute(obj, docelt, attr, val);\r\n\t});\r\n}\r\n\r\nglam.Transform.parseStyle = function(style, t) {\r\n\t\r\n\tif (style) {\r\n\t\tif (style.x) {\r\n\t\t\tt.x = parseFloat(style.x);\r\n\t\t}\r\n\t\tif (style.y) {\r\n\t\t\tt.y = parseFloat(style.y);\r\n\t\t}\r\n\t\tif (style.z) {\r\n\t\t\tt.z = parseFloat(style.z);\r\n\t\t}\r\n\t\tif (style.rx) {\r\n\t\t\tt.rx = glam.Transform.parseRotation(style.rx);\r\n\t\t}\r\n\t\tif (style.ry) {\r\n\t\t\tt.ry = glam.Transform.parseRotation(style.ry);\r\n\t\t}\r\n\t\tif (style.rz) {\r\n\t\t\tt.rz = glam.Transform.parseRotation(style.rz);\r\n\t\t}\r\n\t\tif (style.sx) {\r\n\t\t\tt.sx = parseFloat(style.sx);\r\n\t\t}\r\n\t\tif (style.sy) {\r\n\t\t\tt.sy = parseFloat(style.sy);\r\n\t\t}\r\n\t\tif (style.sz) {\r\n\t\t\tt.sz = parseFloat(style.sz);\r\n\t\t}\r\n\t\tif (style.transform) {\t\t\t\r\n\t\t\tglam.Transform.parseTransform(style.transform, t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nglam.Transform.parseRotation = function(r) {\r\n\tif (!r)\r\n\t\treturn null;\r\n\t\r\n\tr = r.toLowerCase();\r\n\tvar i = r.indexOf(\"deg\");\r\n\tif (i != -1) {\r\n\t\tvar degrees = r.split(\"deg\");\r\n\t\tif (degrees.length) {\r\n\t\t\tvar deg = parseFloat(degrees[0]);\r\n\t\t\treturn THREE.Math.degToRad(deg);\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar i = r.indexOf(\"rad\");\r\n\tif (i != -1) {\r\n\t\tvar radians = r.split(\"rad\");\r\n\t\tif (radians.length) {\r\n\t\t\tvar rad = parseFloat(radians[0]);\r\n\t\t\treturn rad;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn parseFloat(r);\r\n}\r\n\r\nglam.Transform.parseTransform = function(str, t) {\r\n\r\n\tvar transforms = str.split(\" \");\r\n\tvar i, len = transforms.length;\r\n\tfor (i = 0; i < len; i++) {\r\n\t\tvar transform = transforms[i];\r\n\t\tvar op = transform.split(\"(\")[0];\r\n\t\tvar regExp = /\\(([^)]+)\\)/;\r\n\t\tvar matches = regExp.exec(transform);\r\n\t\tvar value = matches[1];\r\n\t\t\r\n\t\t\r\n\t\tswitch(op) {\r\n\t\t\tcase \"translateX\" :\r\n\t\t\t\tt.x = parseFloat(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"translateY\" :\r\n\t\t\t\tt.y = parseFloat(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"translateZ\" :\r\n\t\t\t\tt.z = parseFloat(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"rotateX\" :\r\n\t\t\t\tt.rx = glam.Transform.parseRotation(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"rotateY\" :\r\n\t\t\t\tt.ry = glam.Transform.parseRotation(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"rotateZ\" :\r\n\t\t\t\tt.rz = glam.Transform.parseRotation(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"scaleX\" :\r\n\t\t\t\tt.sx = parseFloat(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"scaleY\" :\r\n\t\t\t\tt.sy = parseFloat(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"scaleZ\" :\r\n\t\t\t\tt.sz = parseFloat(value);\r\n\t\t\t\tbreak;\r\n\t\t}\t\t\r\n\t}\r\n}\r\n\r\nglam.Transform.onSetAttribute = function(obj, docelt, attr, val) {\r\n\tvar v = parseFloat(val);\r\n\tswitch(attr) {\r\n\t\tcase 'x' :\r\n\t\t\tobj.transform.position.x = v;\r\n\t\t\tbreak;\r\n\t\tcase 'y' :\r\n\t\t\tobj.transform.position.y = v;\r\n\t\t\tbreak;\r\n\t\tcase 'z' :\r\n\t\t\tobj.transform.position.z = v;\r\n\t\t\tbreak;\r\n\t\tcase 'rx' :\r\n\t\t\tobj.transform.rotation.x = v;\r\n\t\t\tbreak;\r\n\t\tcase 'ry' :\r\n\t\t\tobj.transform.rotation.y = v;\r\n\t\t\tbreak;\r\n\t\tcase 'rz' :\r\n\t\t\tobj.transform.rotation.z = v;\r\n\t\t\tbreak;\r\n\t\tcase 'sx' :\r\n\t\t\tobj.transform.scale.x = v;\r\n\t\t\tbreak;\r\n\t\tcase 'sy' :\r\n\t\t\tobj.transform.scale.y = v;\r\n\t\t\tbreak;\r\n\t\tcase 'sz' :\r\n\t\t\tobj.transform.scale.z = v;\r\n\t\t\tbreak;\r\n\t\t\r\n\t}\r\n}\r\n","/**\r\n * @fileoverview transition parser/implementation - still WIP\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Transition = {};\r\n\r\nglam.Transition.DEFAULT_DURATION = glam.Animation.DEFAULT_DURATION;\r\nglam.Transition.DEFAULT_TIMING_FUNCTION =  glam.Animation.DEFAULT_TIMING_FUNCTION;\r\n\r\n// transition:transform 2s, background-color 5s linear 2s;\r\n\r\nglam.Transition.parse = function(docelt, style, obj) {\r\n\r\n\tvar transition = style.transition || \"\";\r\n\t\r\n\tvar transitions = {\r\n\t};\r\n\t\r\n\tvar comps = transition.split(\",\");\r\n\tvar i, len = comps.length;\r\n\tfor (i = 0; i < len; i++) {\r\n\t\tvar comp = comps[i];\r\n\t\tif (comp) {\r\n\t\t\tvar params = comp.split(\" \");\r\n\t\t\tif (params[0] == \"\")\r\n\t\t\t\tparams.shift();\r\n\t\t\tvar propname = params[0];\r\n\t\t\tvar duration = params[1];\r\n\t\t\tvar timingFunction = params[2] || glam.Transition.DEFAULT_TIMING_FUNCTION;\r\n\t\t\tvar delay = params[3] || \"\";\r\n\t\t\t\r\n\t\t\tduration = glam.Animation.parseTime(duration);\r\n\t\t\ttimingFunction = glam.Animation.parseTimingFunction(timingFunction);\r\n\t\t\tdelay = glam.Animation.parseTime(delay);\r\n\t\t\t\r\n\t\t\ttransitions[propname] = {\r\n\t\t\t\t\tduration : duration,\r\n\t\t\t\t\ttimingFunction : timingFunction,\r\n\t\t\t\t\tdelay : delay\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n","/**\r\n * @fileoverview built-in types and utilities to support glam parser\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Types = {\r\n};\r\n\r\n// statics\r\nglam.Types.types = {\r\n\t\t\"cube\" :  { cls : glam.Cube, transform:true, animation:true, input:true, visual:true },\r\n\t\t\"cone\" :  { cls : glam.Cone, transform:true, animation:true, input:true, visual:true },\r\n\t\t\"cylinder\" :  { cls : glam.Cylinder, transform:true, animation:true, input:true, visual:true },\r\n\t\t\"sphere\" :  { cls : glam.Sphere, transform:true, animation:true, input:true, visual:true },\r\n\t\t\"rect\" :  { cls : glam.Rect, transform:true, animation:true, input:true, visual:true },\r\n\t\t\"circle\" :  { cls : glam.Circle, transform:true, animation:true, input:true, visual:true },\r\n\t\t\"arc\" :  { cls : glam.Arc, transform:true, animation:true, input:true, visual:true },\r\n\t\t\"group\" :  { cls : glam.Group, transform:true, animation:true, input:true },\r\n\t\t\"animation\" :  { cls : glam.Animation },\r\n\t\t\"background\" :  { cls : glam.Background },\r\n\t\t\"import\" :  { cls : glam.Import, transform:true, animation:true },\r\n\t\t\"camera\" :  { cls : glam.Camera, transform:true, animation:true },\r\n\t\t\"controller\" :  { cls : glam.Controller },\r\n\t\t\"text\" :  { cls : glam.Text, transform:true, animation:true, input:true, visual:true },\r\n\t\t\"mesh\" :  { cls : glam.Mesh, transform:true, animation:true, input:true, visual:true },\r\n\t\t\"line\" :  { cls : glam.Line, transform:true, animation:true, visual:true },\r\n\t\t\"light\" :  { cls : glam.Light, transform:true, animation:true },\r\n\t\t\"particles\" :  { cls : glam.Particles, transform:true, animation:true },\r\n\t\t\"effect\" :  { cls : glam.Effect, },\r\n};\r\n\r\n\r\nglam.Types.parseVector3Array = function(element, vertices) {\r\n\r\n\tvar text = element.textContent;\r\n\tvar nums = text.split(\" \");\r\n\t\r\n\tvar i, len = nums.length;\r\n\tif (len < 3)\r\n\t\treturn;\r\n\t\r\n\tfor (i = 0; i < len; i += 3) {\r\n\t\t\r\n\t\tvar x = parseFloat(nums[i]), \r\n\t\t\ty = parseFloat(nums[i + 1]), \r\n\t\t\tz = parseFloat(nums[i + 2]);\r\n\t\t\r\n\t\tvar vec = new THREE.Vector3(x, y, z);\r\n\t\tvertices.push(vec);\r\n\t}\r\n}\r\n\r\nglam.Types.parseVector3 = function(text, vec) {\r\n\r\n\tvar nums = text.split(\" \");\r\n\t\r\n\tvar i, len = nums.length;\r\n\tif (len < 3)\r\n\t\treturn;\r\n\t\r\n\tvar x = parseFloat(nums[0]), \r\n\t\ty = parseFloat(nums[1]), \r\n\t\tz = parseFloat(nums[2]);\r\n\t\r\n\tvec.set(x, y, z);\r\n}\r\n\r\nglam.Types.parseVector2Array = function(element, uvs) {\r\n\tvar text = element.textContent;\r\n\tvar nums = text.split(\" \");\r\n\t\r\n\tvar i, len = nums.length;\r\n\tif (len < 2)\r\n\t\treturn;\r\n\t\r\n\tfor (i = 0; i < len; i += 2) {\r\n\t\t\r\n\t\tvar x = parseFloat(nums[i]), \r\n\t\t\ty = parseFloat(nums[i + 1]);\r\n\t\t\r\n\t\tvar vec = new THREE.Vector2(x, y);\r\n\t\tuvs.push(vec);\r\n\t}\r\n\r\n}\r\n\r\nglam.Types.parseColor3Array = function(element, colors) {\r\n\tvar text = element.textContent;\r\n\tvar nums = text.split(\" \");\r\n\t\r\n\tvar i, len = nums.length;\r\n\tif (len < 3)\r\n\t\treturn;\r\n\t\r\n\tfor (i = 0; i < len; i += 3) {\r\n\t\t\r\n\t\tvar r = parseFloat(nums[i]), \r\n\t\t\tg = parseFloat(nums[i + 1]), \r\n\t\t\tb = parseFloat(nums[i + 2]);\r\n\t\t\r\n\t\tvar c = new THREE.Color(r, g, b);\r\n\t\tcolors.push(c);\r\n\t}\r\n\r\n}\r\n\r\n\r\nglam.Types.parseColor3 = function(text, c) {\r\n\r\n\tvar nums = text.split(\" \");\r\n\t\r\n\tvar i, len = nums.length;\r\n\tif (len < 3)\r\n\t\treturn;\r\n\t\r\n\tvar r = parseFloat(nums[0]), \r\n\t\tg = parseFloat(nums[1]), \r\n\t\tb = parseFloat(nums[2]);\r\n\t\r\n\tc.setRGB(r, g, b);\r\n}\r\n\r\nglam.Types.parseFaceArray = function(element, faces) {\r\n\t\r\n\tvar text = element.textContent;\r\n\tvar nums = text.split(\" \");\r\n\t\r\n\tvar i, len = nums.length;\r\n\tif (len < 1)\r\n\t\treturn;\r\n\t\r\n\tfor (i = 0; i < len; i += 3) {\r\n\t\t\r\n\t\tvar a = parseInt(nums[i]), \r\n\t\t\tb = parseInt(nums[i + 1]), \r\n\t\t\tc = parseInt(nums[i + 2]);\r\n\t\t\r\n\t\tvar face = new THREE.Face3(a, b, c);\r\n\t\tfaces.push(face);\r\n\t}\r\n\r\n}\r\n\r\nglam.Types.parseUVArray = function(element, uvs) {\r\n\tvar text = element.textContent;\r\n\tvar nums = text.split(\" \");\r\n\t\r\n\tvar i, len = nums.length;\r\n\tif (len < 6)\r\n\t\treturn;\r\n\t\r\n\tfor (i = 0; i < len; i += 6) {\r\n\t\t\r\n\t\tvar faceUvs = [];\r\n\t\t\r\n\t\tfor (var j = 0; j < 3; j++) {\r\n\t\t\tvar x = parseFloat(nums[i + j * 2]);\r\n\t\t\tvar y = parseFloat(nums[i + j * 2 + 1]);\r\n\t\t\tvar vec = new THREE.Vector2(x, y);\r\n\t\t\tfaceUvs.push(vec);\r\n\t\t}\r\n\t\t\r\n\t\tuvs.push(faceUvs);\r\n\t}\r\n\r\n}\r\n","/**\r\n * @fileoverview viewer - creates WebGL (Three.js/Vizi scene) by traversing document\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Viewer = function(doc) {\r\n\r\n\tthis.document = doc;\r\n\tthis.documentParent = doc.parentElement;\r\n\tthis.riftRender = glam.riftRender || false;\r\n\tthis.cardboardRender = glam.cardboardRender || false;\r\n\tthis.displayStats = glam.displayStats || false;\r\n}\r\n\r\nglam.Viewer.prototype = new Object;\r\n\r\nglam.Viewer.prototype.initRenderer = function() {\r\n\tvar renderers = this.document.getElementsByTagName('renderer');\r\n\tif (renderers) {\r\n\t\tvar renderer = renderers[0];\r\n\t\tif (renderer) {\r\n\t\t\tvar type = renderer.getAttribute(\"type\").toLowerCase();\r\n\t\t\tif (type == \"rift\") {\r\n\t\t\t\tthis.riftRender = true;\r\n\t\t\t}\r\n\t\t\telse if (type == \"cardboard\") {\r\n\t\t\t\tthis.cardboardRender = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.app = new Vizi.Viewer({ container : this.documentParent, \r\n\t\theadlight: false, \r\n\t\triftRender:this.riftRender, \r\n\t\tcardboard:this.cardboardRender,\r\n\t\tdisplayStats:this.displayStats });\r\n}\r\n\r\nglam.Viewer.prototype.initDefaultScene = function() {\r\n\t\r\n\tthis.scene = new Vizi.Object;\r\n\tthis.app.sceneRoot.addChild(this.scene);\r\n\tthis.app.defaultCamera.position.set(0, 0, 5);\r\n}\r\n\r\nglam.Viewer.prototype.traverseScene = function() {\r\n\tvar scenes = this.document.getElementsByTagName('scene');\r\n\tif (scenes) {\r\n\t\tvar scene = scenes[0];\r\n\t\tthis.traverse(scene, this.scene);\r\n\t}\r\n\telse {\r\n\t\tconsole.warn(\"Document error! glam requires one 'scene' element\");\r\n\t\treturn;\r\n\t}\r\n}\r\n\r\nglam.Viewer.prototype.traverse = function(docelt, sceneobj) {\r\n\r\n\tvar tag = docelt.tagName;\r\n\r\n\tvar i, len, children = docelt.childNodes, len = children.length;\r\n\tfor (i = 0; i < len; i++) {\r\n\t\tvar childelt = children[i];\r\n\t\tvar tag = childelt.tagName;\r\n\t\tif (tag)\r\n\t\t\ttag = tag.toLowerCase();\r\n\r\n\t\tvar fn = null;\r\n\t\tvar type = tag ? glam.Types.types[tag] : null;\r\n\t\tif (type && type.cls && (fn = type.cls.create) && typeof(fn) == \"function\") {\r\n\t\t\t// console.log(\"    * found it in table!\");\r\n\t\t\tglam.Node.init(childelt);\r\n\t\t\tvar style = glam.Node.getStyle(childelt);\r\n\t\t\tvar obj = fn.call(this, childelt, style, this.app);\r\n\t\t\tif (obj) {\r\n\t\t\t\tchildelt.glam.object = obj;\r\n\t\t\t\tthis.addFeatures(childelt, style, obj, type);\r\n\t\t\t\tsceneobj.addChild(obj);\r\n\t\t\t\tthis.traverse(childelt, obj);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nglam.Viewer.prototype.addNode = function(docelt) {\r\n\r\n\tvar tag = docelt.tagName;\r\n\tif (tag)\r\n\t\ttag = tag.toLowerCase();\r\n\tvar fn = null;\r\n\tvar type = tag ? glam.Types.types[tag] : null;\r\n\tif (type && type.cls && (fn = type.cls.create) && typeof(fn) == \"function\") {\r\n\r\n\t\tglam.Node.init(docelt);\r\n\t\tvar style = glam.Node.getStyle(docelt);\r\n\t\tvar obj = fn.call(this, docelt, style, this.app);\r\n\t\t\r\n\t\tif (obj) {\r\n\t\t\tdocelt.glam.object = obj;\r\n\t\t\tthis.addFeatures(docelt, style, obj, type);\r\n\t\t\tthis.scene.addChild(obj);\r\n\t\t\tthis.traverse(docelt, obj);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nglam.Viewer.prototype.removeNode = function(docelt) {\r\n\r\n\tvar obj = docelt.glam.object;\r\n\tif (obj) {\r\n\t\tobj._parent.removeChild(obj);\r\n\t}\r\n}\r\n\r\nglam.Viewer.prototype.addFeatures = function(docelt, style, obj, type) {\r\n\r\n\tif (type.transform) {\r\n\t\tglam.Transform.parse(docelt, style, obj);\r\n\t}\r\n\t\r\n\tif (type.animation) {\r\n\t\tglam.Animation.parse(docelt, style, obj);\r\n\t\tglam.Transition.parse(docelt, style, obj);\r\n\t}\r\n\r\n\tif (type.input) {\r\n\t\tglam.Input.add(docelt, obj);\r\n\t}\r\n\t\r\n\tif (type.visual) {\r\n\t\tglam.Visual.addProperties(docelt, obj);\r\n\t\tglam.Material.addHandlers(docelt, style, obj);\r\n\t}\r\n}\r\n\r\nglam.Viewer.prototype.go = function() {\r\n\t// Run it\r\n\tthis.initRenderer();\r\n\tthis.initDefaultScene();\r\n\tthis.traverseScene();\r\n\tthis.prepareViewsAndControllers();\r\n\tthis.app.run();\r\n}\r\n\r\nglam.Viewer.prototype.prepareViewsAndControllers = function() {\r\n\t\r\n\tvar cameras = this.app.cameras;\r\n\tif (cameras && cameras.length) {\r\n\t\tvar cam = cameras[0];\r\n\t\tvar controller = Vizi.Application.instance.controllerScript;\r\n\t\tcontroller.camera = cam;\r\n\t\tcontroller.enabled = true;\r\n\t\tcam.active = true;\r\n\t}\r\n}\r\n\r\n","/**\r\n * @fileoverview visual base type - used by all thing seen on screen\r\n * \r\n * @author Tony Parisi\r\n */\r\n\r\nglam.Visual = {};\r\n\r\nglam.Visual.create = function(docelt, style, cls) {\r\n\r\n\tvar param = {\r\n\t};\r\n\t\r\n\tcls.getAttributes(docelt, style, param);\r\n\t\r\n\tvar obj = new Vizi.Object;\t\r\n\t\r\n\tvar material = glam.Material.create(style, function(material) {\r\n\t\tglam.Visual.createVisual(obj, cls, docelt, material, param);\r\n\t});\r\n\t\r\n\tif (material) {\r\n\t\tglam.Visual.createVisual(obj, cls, docelt, material, param);\r\n\t}\r\n\t\r\n\treturn obj;\r\n}\r\n\r\nglam.Visual.createVisual = function(obj, cls, docelt, material, param) {\r\n\tvar visual = cls.createVisual(docelt, material, param);\t\r\n\tif (visual) {\r\n\t\tobj.addComponent(visual);\r\n\t\tglam.Visual.addProperties(docelt, obj);\r\n\t}\r\n}\r\n\r\nglam.Visual.addProperties = function(docelt, obj) {\r\n\r\n\tvar visuals = obj.getComponents(Vizi.Visual);\r\n\tvar visual = visuals[0];\r\n\t\r\n\tif (visual) {\r\n\t\t// Is this the API?\t\r\n\t\tdocelt.geometry = visual.geometry;\r\n\t\tdocelt.material = visual.material;\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}